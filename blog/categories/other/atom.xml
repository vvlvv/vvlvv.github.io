<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Other | 人生短短数十载]]></title>
  <link href="http://livv.github.io/blog/categories/other/atom.xml" rel="self"/>
  <link href="http://livv.github.io/"/>
  <updated>2014-12-13T15:41:29+08:00</updated>
  <id>http://livv.github.io/</id>
  <author>
    <name><![CDATA[vvlee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[密码安全存储解决方案]]></title>
    <link href="http://livv.github.io/blog/2013/01/23/store-password-security/"/>
    <updated>2013-01-23T15:40:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/01/23/store-password-security</id>
    <content type="html"><![CDATA[<p>来源<a href="http://www.williamlong.info/archives/3224.html">月光博客</a></p>

<p>自己留个备份 ^_^</p>

<h3>菜鸟方案：</h3>

<p>　　直接存储用户密码的明文或者将密码加密存储。</p>

<p>　　曾经有一次我在某知名网站重置密码，结果邮件中居然直接包含以前设置过的密码。我和客服咨询为什么直接将密码发送给用户，客服答曰：“减少用户步骤，用户体验更好”；再问“管理员是否可以直接获知我的密码”， 客服振振有词：“我们用XXX算法加密过的，不会有问题的”。 殊不知，密码加密后一定能被解密获得原始密码，因此，该网站一旦数据库泄露，所有用户的密码本身就大白于天下。</p>

<p>　　以后看到这类网站，大家最好都绕道而走，因为一家“暴库”，全部遭殃。
　　</p>

<h3>入门方案：</h3>

<p>　　将明文密码做单向哈希后存储。</p>

<p>　　单向哈希算法有一个特性，无法通过哈希后的摘要(digest)恢复原始数据，这也是“单向”二字的来源，这一点和所有的加密算法都不同。常用的单向哈希算法包括SHA-256，SHA-1，MD5等。例如，对密码“passwordhunter”进行SHA-256哈希后的摘要(digest)如下：
“bbed833d2c7805c4bf039b140bec7e7452125a04efa9e0b296395a9b95c2d44c”</p>

<p>　　可能是“单向”二字有误导性，也可能是上面那串数字唬人，不少人误以为这种方式很可靠， 其实不然。</p>

<p>　　单向哈希有两个特性：</p>

<p>　　1）从同一个密码进行单向哈希，得到的总是唯一确定的摘要</p>

<p>　　2）计算速度快。随着技术进步，尤其是显卡在高性能计算中的普及，一秒钟能够完成数十亿次单向哈希计算</p>

<p>　　结合上面两个特点，考虑到多数人所使用的密码为常见的组合，攻击者可以将所有密码的常见组合进行单向哈希，得到一个摘要组合，然后与数据库中的摘要进行比对即可获得对应的密码。这个摘要组合也被称为rainbow table。</p>

<p>　　更糟糕的是，一个攻击者只要建立上述的rainbow table，可以匹配所有的密码数据库。仍然等同于一家“暴库”，全部遭殃。以后要是有某家厂商宣布“我们的密码都是哈希后存储的，绝对安全”，大家对这个行为要特别警惕并表示不屑。有兴趣的朋友可以搜索下，看看哪家厂商躺着中枪了。
　　</p>

<h3>进阶方案：</h3>

<p>　　将明文密码混入“随机因素”，然后进行单向哈希后存储，也就是所谓的“Salted Hash”。</p>

<p>　　这个方式相比上面的方案，最大的好处是针对每一个数据库中的密码，都需要建立一个完整的rainbow table进行匹配。 因为两个同样使用“passwordhunter”作为密码的账户，在数据库中存储的摘要完全不同。</p>

<p>　　10多年以前，因为计算和内存大小的限制，这个方案还是足够安全的，因为攻击者没有足够的资源建立这么多的rainbow table。 但是，在今日，因为显卡的恐怖的并行计算能力，这种攻击已经完全可行。
　　</p>

<h3>专家方案：</h3>

<p>　　故意增加密码计算所需耗费的资源和时间，使得任何人都不可获得足够的资源建立所需的rainbow table。</p>

<p>　　这类方案有一个特点，算法中都有个因子，用于指明计算密码摘要所需要的资源和时间，也就是计算强度。计算强度越大，攻击者建立rainbow table越困难，以至于不可继续。</p>

<p>　　这类方案的常用算法有三种：</p>

<p>　　1）PBKDF2(Password-Based Key Derivation Function)</p>

<p>　　PBKDF2简单而言就是将salted hash进行多次重复计算，这个次数是可选择的。如果计算一次所需要的时间是1微秒，那么计算1百万次就需要1秒钟。假如攻击一个密码所需的rainbow table有1千万条，建立所对应的rainbow table所需要的时间就是115天。这个代价足以让大部分的攻击者忘而生畏。</p>

<p>　　美国政府机构已经将这个方法标准化，并且用于一些政府和军方的系统。 这个方案最大的优点是标准化，实现容易同时采用了久经考验的SHA算法。</p>

<p>　　2） bcrypt</p>

<p>　　bcrypt是专门为密码存储而设计的算法，基于Blowfish加密算法变形而来，由Niels Provos和David Mazières发表于1999年的USENIX。</p>

<p>　　bcrypt最大的好处是有一个参数（work factor)，可用于调整计算强度，而且work factor是包括在输出的摘要中的。随着攻击者计算能力的提高，使用者可以逐步增大work factor，而且不会影响已有用户的登陆。</p>

<p>　　bcrypt经过了很多安全专家的仔细分析，使用在以安全著称的OpenBSD中，一般认为它比PBKDF2更能承受随着计算能力加强而带来的风险。bcrypt也有广泛的函数库支持，因此我们建议使用这种方式存储密码。</p>

<p>　　3) scrypt</p>

<p>　　scrypt是由著名的FreeBSD黑客 Colin Percival为他的备份服务 Tarsnap开发的。</p>

<p>　　和上述两种方案不同，scrypt不仅计算所需时间长，而且占用的内存也多，使得并行计算多个摘要异常困难，因此利用rainbow table进行暴力攻击更加困难。scrypt没有在生产环境中大规模应用，并且缺乏仔细的审察和广泛的函数库支持。但是，scrypt在算法层面只要没有破绽，它的安全性应该高于PBKDF2和bcrypt。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013 计划]]></title>
    <link href="http://livv.github.io/blog/2013/01/03/2013-plan/"/>
    <updated>2013-01-03T23:56:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/01/03/2013-plan</id>
    <content type="html"><![CDATA[<blockquote><p>人生短短数十载，本该淡淡然。</p></blockquote>

<p>so，今年不能像往年那样虚度了。必须做点什么了。</p>

<hr />

<ul>
<li>计划1 做点自己喜欢的事情</li>
<li>计划2 做点有意思的事情</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In a Word]]></title>
    <link href="http://livv.github.io/blog/2012/12/19/in-a-word/"/>
    <updated>2012-12-19T10:53:00+08:00</updated>
    <id>http://livv.github.io/blog/2012/12/19/in-a-word</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://xingfuke.net/xingfuke766">选择之困惑——为何多即是少？</a></li>
<li><a href="http://www.williamlong.info/archives/3062.html">程序员真的很懒&hellip;</a></li>
<li>自卑大多来源于虚荣</li>
<li>语言,不过是人们对认知世界的一种表达方式</li>
<li>一切技术的进步，都是为了满足人们日益变懒的需求</li>
<li>“the medium is the message” (媒介才是信息)。真正带来巨大影响的，不是内容（content），而是媒介（medium）本身。</li>
</ul>


<blockquote><p>本该淡淡然~~~</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HelloWorld]]></title>
    <link href="http://livv.github.io/blog/2012/02/14/helloworld/"/>
    <updated>2012-02-14T11:58:00+08:00</updated>
    <id>http://livv.github.io/blog/2012/02/14/helloworld</id>
    <content type="html"><![CDATA[<p>第一篇博客，顾名“HelloWorld”。发几张图当做练习。</p>

<p><img class="<a" src="href="http://placekitten.com/890/210">http://placekitten.com/890/210</a>&#8221;>
<img class="left <a" src="href="http://placekitten.com/320/250">http://placekitten.com/320/250</a>&#8221; title=&#8221;Place Kitten #2&#8221; >
<img class="right <a" src="href="http://placekitten.com/300/500">http://placekitten.com/300/500</a>&#8221; width=&#8221;150&#8221; height=&#8221;250&#8221; title=&#8221;Place Kitten #3&#8221; ></p>

<blockquote><p>本该淡淡然~~~</p></blockquote>
]]></content>
  </entry>
  
</feed>
