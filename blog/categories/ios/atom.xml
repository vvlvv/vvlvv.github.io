<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | 人生短短数十载]]></title>
  <link href="http://livv.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://livv.github.io/"/>
  <updated>2014-12-16T10:18:16+08:00</updated>
  <id>http://livv.github.io/</id>
  <author>
    <name><![CDATA[vvlee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Iphone Lcd Clock Use System Font]]></title>
    <link href="http://livv.github.io/blog/2013/07/17/iphone-lcd-clock-use-system-font/"/>
    <updated>2013-07-17T22:16:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/07/17/iphone-lcd-clock-use-system-font</id>
    <content type="html"><![CDATA[<p>iPhone 默认的液晶时钟效果很是经典，如果您想在自己的应用里显示该时钟，可以用以下代码</p>

<pre><code>[UIFont fontWithName:@"DBLCDTempBlack" size:58]
</code></pre>

<ul>
<li>此外，类似 DBLCDTempBlack 的可用字体列表：</li>
</ul>


<pre><code>Family name: AppleGothic
Font name: AppleGothic
Family name: Hiragino Kaku Gothic ProN
Font name: HiraKakuProN-W6
Font name: HiraKakuProN-W3
Family name: Arial Unicode MS
Font name: ArialUnicodeMS
Family name: Heiti K
Font name: STHeitiK-Medium
Font name: STHeitiK-Light
Family name: DB LCD Temp
Font name: DBLCDTempBlack
Family name: Helvetica
Font name: Helvetica-Oblique
Font name: Helvetica-BoldOblique
Font name: Helvetica
Font name: Helvetica-Bold
Family name: Marker Felt
Font name: MarkerFelt-Thin
Family name: Times New Roman
Font name: TimesNewRomanPSMT
Font name: TimesNewRomanPS-BoldMT
Font name: TimesNewRomanPS-BoldItalicMT
Font name: TimesNewRomanPS-ItalicMT
Family name: Verdana
Font name: Verdana-Bold
Font name: Verdana-BoldItalic
Font name: Verdana
Font name: Verdana-Italic
Family name: Georgia
Font name: Georgia-Bold
Font name: Georgia
Font name: Georgia-BoldItalic
Font name: Georgia-Italic
Family name: Arial Rounded MT Bold
Font name: ArialRoundedMTBold
Family name: Trebuchet MS
Font name: TrebuchetMS-Italic
Font name: TrebuchetMS
Font name: Trebuchet-BoldItalic
Font name: TrebuchetMS-Bold
Family name: Heiti TC
Font name: STHeitiTC-Light
Font name: STHeitiTC-Medium
Family name: Geeza Pro
Font name: GeezaPro-Bold
Font name: GeezaPro
Family name: Courier
Font name: Courier
Font name: Courier-BoldOblique
Font name: Courier-Oblique
Font name: Courier-Bold
Family name: Arial
Font name: ArialMT
Font name: Arial-BoldMT
Font name: Arial-BoldItalicMT
Font name: Arial-ItalicMT
Family name: Heiti J
Font name: STHeitiJ-Medium
Font name: STHeitiJ-Light
Family name: Arial Hebrew
Font name: ArialHebrew
Font name: ArialHebrew-Bold
Family name: Courier New
Font name: CourierNewPS-BoldMT
Font name: CourierNewPS-ItalicMT
Font name: CourierNewPS-BoldItalicMT
Font name: CourierNewPSMT
Family name: Zapfino
Font name: Zapfino
Family name: American Typewriter
Font name: AmericanTypewriter
Font name: AmericanTypewriter-Bold
Family name: Heiti SC
Font name: STHeitiSC-Medium
Font name: STHeitiSC-Light
Family name: Helvetica Neue
Font name: HelveticaNeue
Font name: HelveticaNeue-Bold
Family name: Thonburi
Font name: Thonburi-Bold
Font name: Thonburi
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSPredicate 的用法]]></title>
    <link href="http://livv.github.io/blog/2013/05/08/nspredicate/"/>
    <updated>2013-05-08T09:22:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/05/08/nspredicate</id>
    <content type="html"><![CDATA[<p>一般来说这种情况还是蛮多的，比如你从文件中读入了一个array1，然后想把程序中的一个array2中符合array1中内容的元素过滤出来。
正 常傻瓜一点就是两个for循环，一个一个进行比较，这样效率不高，而且代码也不好看。
其实一个循环或者无需循环就可以搞定了，那就需要用搞 NSPredicate这个类了～膜拜此类～</p>

<h5>例子一，一个循环</h5>

<pre><code>NSArray *arrayFilter = [NSArray arrayWithObjects:@"pict", @"blackrain", @"ip", nil];
NSArray *arrayContents = [NSArray arrayWithObjects:@"I am a picture.", @"I am a guy", @"I am gagaga", @"ipad", @"iphone", nil];
</code></pre>

<p>我想过滤arrayContents的话只要循环 arrayFilter就好了</p>

<pre><code>int i = 0, count = [arrayFilter count];
for(i = 0; i &lt; count; i ++)
{
NSString *arrayItem = (NSString *)[arrayFilter objectAtIndex:i];
NSPredicate *filterPredicate = [[NSPredicate predicateWithFormat:@"SELF CONTAINS %@", arrayItem];
NSLog(@"Filtered array with filter %@, %@", arrayItem, [arrayContents filteredArrayUsingPredicate:filterPredicate]);
}
</code></pre>

<p>当然以上代码中arrayContent最好用mutable 的，这样就可以直接filter了，NSArray是不可修改的。</p>

<h5>例子二，无需循环</h5>

<pre><code>NSArray *arrayFilter = [NSArray arrayWithObjects:@"abc1", @"abc2", nil];
NSArray *arrayContent = [NSArray arrayWithObjects:@"a1", @"abc1", @"abc4", @"abc2", nil];
NSPredicate *thePredicate = [NSPredicate predicateWithFormat:@"NOT (SELF in %@)", arrayFilter];
[arrayContent filterUsingPredicate:thePredicate];
</code></pre>

<p>这样arrayContent过滤出来的就是不包含 arrayFilter中的所有item了。</p>

<h5>生成文件路径下文件集合列表</h5>

<pre><code>NSFileManager *fileManager = [NSFileManager defaultManager];
NSString *defaultPath = [[NSBundle mainBundle] resourcePath];
NSError *error;
NSArray *directoryContents = [fileManager contentsOfDirectoryAtPath:defaultPath error:&amp;error]
</code></pre>

<p><code>match的用法</code></p>

<ul>
<li>简单比较</li>
</ul>


<pre><code>NSString *match = @"imagexyz-999.png";
NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF == %@", match];
NSArray *results = [directoryContents filteredArrayUsingPredicate:predicate];﻿
</code></pre>

<ul>
<li>match里like的用法（类似Sql中的用法）</li>
</ul>


<pre><code>NSString *match = @"imagexyz*.png";
NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF like %@", match];
NSArray *results = [directoryContents filteredArrayUsingPredicate:predicate];﻿
</code></pre>

<ul>
<li>大小写比较</li>
</ul>


<p>［c］表示忽略大小写，［d］表示忽略重音，可以在一起使用，如下：</p>

<pre><code>NSString *match = @"imagexyz*.png";
NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF like[cd] %@", match];
NSArray *results = [directoryContents filteredArrayUsingPredicate:predicate];﻿
</code></pre>

<ul>
<li>使用正则</li>
</ul>


<pre><code>NSString *match = @"imagexyz-\\d{3}\\.png";  //imagexyz－123.png
NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF matches %@", match];
NSArray *results = [directoryContents filteredArrayUsingPredicate:predicate];﻿
</code></pre>

<h5>总结：</h5>

<ol>
<li>当使用聚合类的操作符时是可以不需要循环的</li>
<li>当使用单个比较类的操作符时可以一个循环来搞定</li>
</ol>


<p>PS，例子 一中尝试使用[@&ldquo;SELF CONTAINS %@&rdquo;, arrayFilter] 来过滤会挂调，因为CONTAINS时字符串比较操作符，不是集合操作符。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[25个增强iOS应用程序性能的提示和技巧]]></title>
    <link href="http://livv.github.io/blog/2013/04/12/25-ios-skill/"/>
    <updated>2013-04-12T11:38:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/04/12/25-ios-skill</id>
    <content type="html"><![CDATA[<p><a href="http://beyondvincent.com">来源</a></p>

<ol>
<li>使用ARC进行内存管理</li>
<li>在适当的情况下使用reuseIdentifier</li>
<li>尽可能将View设置为不透明（Opaque）</li>
<li>避免臃肿的XIBs</li>
<li>不要阻塞主线程</li>
<li>让图片的大小跟UIImageView一样</li>
<li>选择正确的集合</li>
<li>使用GZIP压缩</li>
<li>重用和延迟加载View</li>
<li>缓存、缓存、缓存</li>
<li>考虑绘制</li>
<li>处理内存警告</li>
<li>重用花销很大的对象</li>
<li>使用Sprite Sheets</li>
<li>避免重新处理数据</li>
<li>选择正确的数据格式</li>
<li>设置适当的背景图片</li>
<li>降低Web内容的影响</li>
<li>设置阴影路径</li>
<li>优化TableView</li>
<li>选择正确的数据存储方式</li>
<li>加速启动时间</li>
<li>使用Autorelease Pool</li>
<li>缓存图片 — 或者不缓存</li>
<li>尽量避免Date格式化</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[info.plist常用key介绍]]></title>
    <link href="http://livv.github.io/blog/2012/08/24/info-plist-common-key/"/>
    <updated>2012-08-24T16:41:00+08:00</updated>
    <id>http://livv.github.io/blog/2012/08/24/info-plist-common-key</id>
    <content type="html"><![CDATA[<ul>
<li>UIRequiresPersistentWiFi 在程序中弹出wifi选择的key（系统设置中需要将wifi提示打开）</li>
<li>UIAppFonts 内嵌字体<a href="http://www.minroad.com/?p=412">详细介绍</a></li>
<li>UIApplicationExitsOnSuspend 程序是否在后台运行，自己在进入后台的时候exit(0)是很傻的办法</li>
<li>UIBackgroundModes 后台运行时的服务，具体看iOS4的后台介绍</li>
<li>UIDeviceFamily array类型（1为iPhone和iPod touch设备，2为iPad)</li>
<li>UIFileSharingEnabled 开启itunes共享document文件夹</li>
<li>UILaunchImageFile 相当于Default.png（更名而已）</li>
<li>UIPrerenderedIcon icon上是否有高光</li>
<li>UIRequiredDeviceCapabilities 设备需要的功能<a href="http://developer.apple.com/library/mac/#documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html%23//apple_ref/doc/uid/TP40009252-SW3">具体点击这里查看</a></li>
<li>UIStatusBarHidden 状态栏隐藏（和程序内的区别是在于显示Default.png已经生效）</li>
<li>UIStatusBarStyle 状态栏类型</li>
<li>UIViewEdgeAntialiasing 是否开启抗锯齿</li>
<li>CFBundleDisplayName app显示名</li>
<li>CFBundleIconFile、CFBundleIconFiles 图标</li>
<li>CFBundleName 与CFBundleDisplayName的区别在于这个是短名，16字符之内</li>
<li>CFBundleVersion 版本</li>
<li>CFBundleURLTypes 自定义url，用于利用url弹回程序</li>
<li>CFBundleLocalizations 本地资源的本地化语言，用于itunes页面左下角显示本地话语种</li>
<li>CFBundleDevelopmentRegion 也是本地化相关，如果用户所在地没有相应的语言资源，则用这个key的value来作为默认</li>
</ul>


<blockquote><p>本该淡淡然~~~</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone 系统常用目录路径位置]]></title>
    <link href="http://livv.github.io/blog/2012/08/16/iphone-system-common-dir/"/>
    <updated>2012-08-16T21:09:00+08:00</updated>
    <id>http://livv.github.io/blog/2012/08/16/iphone-system-common-dir</id>
    <content type="html"><![CDATA[<ol>
<li>【/Applications】
常用软件的安装目录</li>
<li>【/private /var/ mobile/Media /iphone video Recorder】
录像文件存放目录</li>
<li>【/private /var/ mobile/Media /DCIM】
相机拍摄的照片文件存放目录</li>
<li>【/private/var/ mobile /Media/iTunes_Control/Music】
iTunes上传的多媒体文件（例如MP3、MP4等）存放目录，文件没有被修改，但是文件名字被修改了，直接下载到电脑即可读取。</li>
<li>【/private /var/root/Media/EBooks】
电子书存放目录</li>
<li>【/Library/Ringtones】
系统自带的来电铃声存放目录（用iTunes将文件转换为ACC文件，把后缀名改成.m4r,用iPhone_PC_Suite传到/Library/Ringtones即可）</li>
<li>【/private/var/ mobile /Library/AddressBook】
系统电话本的存放目录。</li>
<li>【/private /var/ mobile/Media /iphone Recorder】
录音文件存放目录</li>
<li>【/Applications/Preferences.app/zh_CN.lproj】
软件Preferences.app的中文汉化文件存放目录</li>
<li>【/Library/Wallpaper】
系统墙纸的存放目录</li>
<li>【/System/Library/Audio/UISounds】
系统声音文件的存放目录</li>
<li>【/private/var/root/Media/PXL】
ibrickr上传安装程序建立的一个数据库，估计和windows的uninstall记录差不多。</li>
<li>【/bin】
和linux系统差不多，是系统执行指令的存放目录。</li>
<li>【/private/var/ mobile /Library/SMS】
系统短信的存放目录</li>
<li>【/private/var/run】
系统进程运行的临时目录？（查看这里可以看到系统启动的所有进程）</li>
<li>【/private/var/logs/CrashReporter】
系统错误记录报告</li>
<li>【/System/Library/Fonts/Cache】锁屏时钟字体体 ，记得备份原始的字体，然后将 &ldquo;LockClock.ttf&rdquo; 复制进去，然后重启或者respring iphone</li>
</ol>


<hr />

<p>分割线（补充说明）</p>

<hr />

<ol>
<li>/private/var/mobile 　新刷完的机器，要在这个文件夹下建一个Documents的目录。</li>
<li>/private/var/mobile/Applications 　通过AppStore和iTunes安装的程序都在里面。</li>
<li>/private/var/stash 　这个文件夹下的Applications目录里面是所有通过Cydia和app安装的程序，Ringtones目录里是所有的手机铃音，自制铃音直接拷在里面即可，Themes目录里是所有Winterboard主题，可以手工修改。</li>
<li>/var/mobile/Media/ROMs/GBA 　gpsPhone模拟器存放rom的目录。</li>
<li>/var/mobile/Media/textReader 　textReader看书软件读取的电子书的存放路径。</li>
<li>/System/Library/Fonts/Cache（系统字体目录，要替换的字体放在该目录下，权限644不变）</li>
<li>/private/var/mobile/Media/Maps（离线地图目录，把地图文件夹放到该目录下，文件夹赋予777权限）</li>
<li>/private/var/mobile/Library/Downloads （ipa文件存放目录，用Installous安装）</li>
<li>/private/var/mobile/Library/Keyboard （系统拼音字库文件位置）</li>
<li>/var/stash/Themes.XXXXXX （winterboard主题文件存放路径）</li>
<li>/private/var/mobile/Media/DCIM/999APPLE （系统自带截屏文件存放路径）</li>
</ol>


<hr />

<p>来给个备份时候常用的路径（摘抄通杀版~）</p>

<ul>
<li>/private/var/mobile/Library/AddressBook → 联系人</li>
<li>/private/var/mobile/Library/CallHistory → 通话记录</li>
<li>/private/var/mobile/Library/SMS → 短信</li>
<li>/private/var/mobile/Library/Notes → 备忘录</li>
<li>/private/var/mobile/Library/Safari → Safari 浏览器保存的书签等</li>
<li>/private/var/mobile/Library/Mail → 电子邮件</li>
<li>/private/var/mobile/Library/MCallShow →信安易来电秀注册文件</li>
<li>/private/var/mobile/Media/DCIM →照片里面的胶卷</li>
<li>/private/var/mobile/Media/Photos →照片里面的图片</li>
<li>/private/var/mobile/Media/Videos →Cycorder摄像机软件拍摄文件保存路径（可以用WINSCP把MP4文件传到这里用它来看哟^_^）</li>
<li>/private/var/mobile/Library/Preferences com.apple.mobilephone.speeddial.plist →个人收藏（快速拨号）</li>
<li>/private/var/mobile/Media/Recordings →语音备忘录</li>
</ul>


<blockquote><p>本该淡淡然~~~</p></blockquote>
]]></content>
  </entry>
  
</feed>
