<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[人生短短数十载]]></title>
  <link href="http://livv.github.io/atom.xml" rel="self"/>
  <link href="http://livv.github.io/"/>
  <updated>2014-12-16T10:18:16+08:00</updated>
  <id>http://livv.github.io/</id>
  <author>
    <name><![CDATA[vvlee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Iphone Lcd Clock Use System Font]]></title>
    <link href="http://livv.github.io/blog/2013/07/17/iphone-lcd-clock-use-system-font/"/>
    <updated>2013-07-17T22:16:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/07/17/iphone-lcd-clock-use-system-font</id>
    <content type="html"><![CDATA[<p>iPhone 默认的液晶时钟效果很是经典，如果您想在自己的应用里显示该时钟，可以用以下代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[UIFont fontWithName:@"DBLCDTempBlack" size:58]</span></code></pre></td></tr></table></div></figure>


<ul>
<li>此外，类似 DBLCDTempBlack 的可用字体列表：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Family name: AppleGothic
</span><span class='line'>Font name: AppleGothic
</span><span class='line'>Family name: Hiragino Kaku Gothic ProN
</span><span class='line'>Font name: HiraKakuProN-W6
</span><span class='line'>Font name: HiraKakuProN-W3
</span><span class='line'>Family name: Arial Unicode MS
</span><span class='line'>Font name: ArialUnicodeMS
</span><span class='line'>Family name: Heiti K
</span><span class='line'>Font name: STHeitiK-Medium
</span><span class='line'>Font name: STHeitiK-Light
</span><span class='line'>Family name: DB LCD Temp
</span><span class='line'>Font name: DBLCDTempBlack
</span><span class='line'>Family name: Helvetica
</span><span class='line'>Font name: Helvetica-Oblique
</span><span class='line'>Font name: Helvetica-BoldOblique
</span><span class='line'>Font name: Helvetica
</span><span class='line'>Font name: Helvetica-Bold
</span><span class='line'>Family name: Marker Felt
</span><span class='line'>Font name: MarkerFelt-Thin
</span><span class='line'>Family name: Times New Roman
</span><span class='line'>Font name: TimesNewRomanPSMT
</span><span class='line'>Font name: TimesNewRomanPS-BoldMT
</span><span class='line'>Font name: TimesNewRomanPS-BoldItalicMT
</span><span class='line'>Font name: TimesNewRomanPS-ItalicMT
</span><span class='line'>Family name: Verdana
</span><span class='line'>Font name: Verdana-Bold
</span><span class='line'>Font name: Verdana-BoldItalic
</span><span class='line'>Font name: Verdana
</span><span class='line'>Font name: Verdana-Italic
</span><span class='line'>Family name: Georgia
</span><span class='line'>Font name: Georgia-Bold
</span><span class='line'>Font name: Georgia
</span><span class='line'>Font name: Georgia-BoldItalic
</span><span class='line'>Font name: Georgia-Italic
</span><span class='line'>Family name: Arial Rounded MT Bold
</span><span class='line'>Font name: ArialRoundedMTBold
</span><span class='line'>Family name: Trebuchet MS
</span><span class='line'>Font name: TrebuchetMS-Italic
</span><span class='line'>Font name: TrebuchetMS
</span><span class='line'>Font name: Trebuchet-BoldItalic
</span><span class='line'>Font name: TrebuchetMS-Bold
</span><span class='line'>Family name: Heiti TC
</span><span class='line'>Font name: STHeitiTC-Light
</span><span class='line'>Font name: STHeitiTC-Medium
</span><span class='line'>Family name: Geeza Pro
</span><span class='line'>Font name: GeezaPro-Bold
</span><span class='line'>Font name: GeezaPro
</span><span class='line'>Family name: Courier
</span><span class='line'>Font name: Courier
</span><span class='line'>Font name: Courier-BoldOblique
</span><span class='line'>Font name: Courier-Oblique
</span><span class='line'>Font name: Courier-Bold
</span><span class='line'>Family name: Arial
</span><span class='line'>Font name: ArialMT
</span><span class='line'>Font name: Arial-BoldMT
</span><span class='line'>Font name: Arial-BoldItalicMT
</span><span class='line'>Font name: Arial-ItalicMT
</span><span class='line'>Family name: Heiti J
</span><span class='line'>Font name: STHeitiJ-Medium
</span><span class='line'>Font name: STHeitiJ-Light
</span><span class='line'>Family name: Arial Hebrew
</span><span class='line'>Font name: ArialHebrew
</span><span class='line'>Font name: ArialHebrew-Bold
</span><span class='line'>Family name: Courier New
</span><span class='line'>Font name: CourierNewPS-BoldMT
</span><span class='line'>Font name: CourierNewPS-ItalicMT
</span><span class='line'>Font name: CourierNewPS-BoldItalicMT
</span><span class='line'>Font name: CourierNewPSMT
</span><span class='line'>Family name: Zapfino
</span><span class='line'>Font name: Zapfino
</span><span class='line'>Family name: American Typewriter
</span><span class='line'>Font name: AmericanTypewriter
</span><span class='line'>Font name: AmericanTypewriter-Bold
</span><span class='line'>Family name: Heiti SC
</span><span class='line'>Font name: STHeitiSC-Medium
</span><span class='line'>Font name: STHeitiSC-Light
</span><span class='line'>Family name: Helvetica Neue
</span><span class='line'>Font name: HelveticaNeue
</span><span class='line'>Font name: HelveticaNeue-Bold
</span><span class='line'>Family name: Thonburi
</span><span class='line'>Font name: Thonburi-Bold
</span><span class='line'>Font name: Thonburi</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Os Terminal Skill]]></title>
    <link href="http://livv.github.io/blog/2013/07/03/mac-os-terminal-skill/"/>
    <updated>2013-07-03T10:35:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/07/03/mac-os-terminal-skill</id>
    <content type="html"><![CDATA[<h2>control+u</h2>

<p>如果你在一条终端命令中发现有输入错误的话，那么用 control+u 快捷键可以直接删除这一整条命令，然后你就可以重新输入。</p>

<h2>mkdir</h2>

<p>很多人可能会很熟悉在 mkdir 是在「终端」中创建文件夹的工具，比如mkdir ./abc，即可在当前目录创建一个名为 abc 的文件夹。但如果想要建立更多层级的目录呢？就需要用 mkdir -p 命令来解决，比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p ./abc/123/guomii/xxx</span></code></pre></td></tr></table></div></figure>


<h2>!!</h2>

<p>有时候，你写了一条长长的命令，按回车之后发现没有执行权限，需要在命令前添加 sudo，这时你可能要崩溃。不过其实可以用 <code>sudo !!</code> 这条命令来解决，它执行的效果和 sudo {上一条命令} 是一样的。</p>

<p>另外，! 在「终端」中还有一个妙用——它可以用来执行你最后一次以特定字母开头的命令。比如你在一个「终端」会话中已经执行过ls,mkdir,find,chown 等多条命令。这时你可以用 !l 来执行 ls，用 !f 来执行 find…大家都看懂了吧？(very cool)</p>

<h2>history</h2>

<p>用 history 命令可以显示你最近执行过的命令历史记录，你还可以指定显示条数，比如 history 20即可显示最近的20条命令历史记录。此外，你还可以筛选包含特定字符的命令，比如用 <code>history | grep mk</code>，就可以只显示历史记录中包含 mk 的命令。</p>

<h2>&amp;&amp;</h2>

<p>&amp;&amp; 可以将两条命令合并成一条命令，其实我们在之前的文章中，已经多次应用过这种写法了，大家可以返回去看看。</p>

<h2>reset</h2>

<p>reset 的作用很简单——将目前「终端」屏幕上的内容清空，就好像刚刚打开终端一样。（不如新建一个标签，然后关掉之前的，感觉这样更快捷。）</p>

<p>其实输入命令远没有快捷键方便，“control+l” 可以清屏，&#8221;command+k&#8221;可以全部清除。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wget Tutorials]]></title>
    <link href="http://livv.github.io/blog/2013/06/27/wget-tutorials/"/>
    <updated>2013-06-27T15:05:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/06/27/wget-tutorials</id>
    <content type="html"><![CDATA[<p>Wget是一种很好用的因特网下载工具，他具有的很多特性是其他工具所不能比拟的，再者他是一个轻量级可配置的下载工具。</p>

<p>本文结合例子介绍Windows下wget的多种下载方法和用途。</p>

<p>1、用Wget下载单个文件</p>

<p>下载的时候会显示：</p>

<p>　　~文件的大小、连接状态、连接地址以及文件的大小</p>

<p>　　~保存的名称</p>

<p>　　~下载进度条</p>

<p>　　~下载速度、时间，还有多少未下载</p>

<p>例如我下载editplus时输入</p>

<p>D:\Hack stuff\wget>wget <a href="http://software-files-a.cnet.com/s/software/12/32/81/47/">http://software-files-a.cnet.com/s/software/12/32/81/47/</a>
epp331.exe?token=1329413178_4553efa847829f3ecef10c1bc256fcc0&amp;lop=link&amp;ptype=3001
&amp;ontid=2352&amp;siteId=4&amp;edId=3&amp;spi=537d5d5485f688682d82c481c4fb15a1&amp;pid=12328147&amp;ps
id=10018241&amp;&amp;fileName=epp331.exe
则下载时会显示以下内容</p>

<p>D:\Hack stuff\wget>wget <a href="http://software-files-a.cnet.com/s/software/12/32/81/47/">http://software-files-a.cnet.com/s/software/12/32/81/47/</a>
epp331.exe?token=1329413178_4553efa847829f3ecef10c1bc256fcc0&amp;lop=link&amp;ptype=3001
&amp;ontid=2352&amp;siteId=4&amp;edId=3&amp;spi=537d5d5485f688682d82c481c4fb15a1&amp;pid=12328147&amp;ps
id=10018241&amp;&amp;fileName=epp331.exe
&ndash;2012-02-16 15:28:50&ndash;  <a href="http://software-files-a.cnet.com/s/software/12/32/81/47">http://software-files-a.cnet.com/s/software/12/32/81/47</a>
/epp331.exe?token=1329413178_4553efa847829f3ecef10c1bc256fcc0
Resolving software-files-a.cnet.com&hellip; 204.2.171.33, 204.2.171.35
Connecting to software-files-a.cnet.com|204.2.171.33|:80&hellip; connected.
HTTP request sent, awaiting response&hellip; 200 OK
Length: 1766464 (1.7M) [application/octet-stream]
Saving to: `epp331.exe@token=1329413178_4553efa847829f3ecef10c1bc256fcc0&#8217;</p>

<p>18% [======>                                ] 335,238     20.5K/s  eta 64s</p>

<p>2、用Wget-O下载可以为下载的文件指定另外一个名字</p>

<p>默认情况下wget会用最后的斜线后面的所有字符来命名下载下来的文件，如上例所示保存的文件名为</p>

<p>Saving to: `epp331.exe@token=1329413178_4553efa847829f3ecef10c1bc256fcc0&#8217;
这不是我们所想要的，我们可以用-O选项来改变将文件保存为editplus.exe</p>

<p>D:\Hack stuff\wget>wget -O editplus.exe <a href="http://software-files-a.cnet.com/s/software/12/32/81/47/">http://software-files-a.cnet.com/s/software/12/32/81/47/</a>
epp331.exe?token=1329413178_4553efa847829f3ecef10c1bc256fcc0&amp;lop=link&amp;ptype=3001
&amp;ontid=2352&amp;siteId=4&amp;edId=3&amp;spi=537d5d5485f688682d82c481c4fb15a1&amp;pid=12328147&amp;ps
id=10018241&amp;&amp;fileName=epp331.exe</p>

<p>3、用Wget &ndash;limit-rate指定下载的速度</p>

<p>如下面这个例子限制速度为300k</p>

<p>D:\Hack stuff\wget>wget &ndash;limit-rate=300k <a href="http://downloads.sourceforge.net/project/boost/boost-doc">http://downloads.sourceforge.net/project/boost/boost-doc</a>
s/1.47.0/boost_1_47_pdf.zip?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fboost%2F
&amp;ts=1329379231&amp;use_mirror=nchc</p>

<p>4、续传下载用Wget -c</p>

<p>当你在下载一个大文件时突然中断了那么这个选项就派上用场了</p>

<p>D:\Hack stuff\wget>wget -c <a href="http://downloads.sourceforge.net/project/boost/boost-doc">http://downloads.sourceforge.net/project/boost/boost-doc</a>
s/1.47.0/boost_1_47_pdf.zip?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fboost%2F
&amp;ts=1329379231&amp;use_mirror=nchc</p>

<p>5、后台下载用wget -b</p>

<p>用此选项下载时只会初始化下载而不会显示相关信息</p>

<p>D:\Hack stuff\wget>wget -b <a href="http://downloads.sourceforge.net/project/boost/boost-">http://downloads.sourceforge.net/project/boost/boost-</a>
docs/1.47.0/boost_1_47_pdf.zip?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fboost
%2F&amp;ts=1329379231&amp;use_mirror=nchc
Continuing in background, pid 6132.
Output will be written to `wget-log&#8217;.
下载以后会在wget目录下生产wget-log文件，用记事本打开可查看里面的内容如下所示</p>

<p>&ndash;2012-02-16 16:12:55&ndash;  <a href="http://downloads.sourceforge.net/project/boost/boost-docs/1.47.0/boost_1_47_pdf.zip?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fboost%2F">http://downloads.sourceforge.net/project/boost/boost-docs/1.47.0/boost_1_47_pdf.zip?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fboost%2F</a>
Resolving downloads.sourceforge.net&hellip; 216.34.181.59
Connecting to downloads.sourceforge.net|216.34.181.59|:80&hellip; connected.
HTTP request sent, awaiting response&hellip; 302 Found
Location: <a href="http://nchc.dl.sourceforge.net/project/boost/boost-docs/1.47.0/boost_1_47_pdf.zip">http://nchc.dl.sourceforge.net/project/boost/boost-docs/1.47.0/boost_1_47_pdf.zip</a> [following]
&ndash;2012-02-16 16:12:56&ndash;  <a href="http://nchc.dl.sourceforge.net/project/boost/boost-docs/1.47.0/boost_1_47_pdf.zip">http://nchc.dl.sourceforge.net/project/boost/boost-docs/1.47.0/boost_1_47_pdf.zip</a>
Resolving nchc.dl.sourceforge.net&hellip; 211.79.60.17
Connecting to nchc.dl.sourceforge.net|211.79.60.17|:80&hellip; connected.
HTTP request sent, awaiting response&hellip; 200 OK
Length: 31421410 (30M) [application/zip]
Saving to: `boost_1_47_pdf.zip.4&#8217;</p>

<pre><code> 0K .......... .......... .......... .......... ..........  0% 19.7K 25m51s
50K .......... .......... .......... .......... ..........  0% 29.1K 21m40s
</code></pre>

<p>   100K &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;.  0% 20.8K 22m35s
   150K &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;.  0% 19.5K 23m26s
   200K &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;.  0% 18.4K 24m13s
   250K &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;.  0% 20.8K 24m13s
   300K &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;.  1% 18.2K 24m41s
   350K &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;.  1% 23.5K 24m16s</p>

<p>6、测试你要下载的地址用Wget &ndash;spider</p>

<p>wget &ndash;spider DOWNLOAD-URL
如果所给URL是正确的则会显示</p>

<p>Resolving downloads.sourceforge.net&hellip; 216.34.181.59
Connecting to downloads.sourceforge.net|216.34.181.59|:80&hellip; connected.
HTTP request sent, awaiting response&hellip; 302 Found
Location: <a href="http://ncu.dl.sourceforge.net/project/boost/boost-docs/1.47.0/boost_1_">http://ncu.dl.sourceforge.net/project/boost/boost-docs/1.47.0/boost_1_</a>
47_pdf.zip [following]
Spider mode enabled. Check if remote file exists.
&ndash;2012-02-16 16:21:08&ndash;  <a href="http://ncu.dl.sourceforge.net/project/boost/boost-docs/">http://ncu.dl.sourceforge.net/project/boost/boost-docs/</a>
1.47.0/boost_1_47_pdf.zip
Resolving ncu.dl.sourceforge.net&hellip; 140.115.17.45
Connecting to ncu.dl.sourceforge.net|140.115.17.45|:80&hellip; connected.
HTTP request sent, awaiting response&hellip; 200 OK
Length: 31421410 (30M) [application/zip]
Remote file exists.
否则显示</p>

<p>Spider mode enabled. Check if remote file exists.
&ndash;2012-02-16 16:23:06&ndash;  <a href="http://downloads.sourceforge.net/project/boost/boost-do">http://downloads.sourceforge.net/project/boost/boost-do</a>
cs/1.47.0/boost_1_47_pdf222.zip?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fboos
t%2F
Resolving downloads.sourceforge.net&hellip; 216.34.181.59
Connecting to downloads.sourceforge.net|216.34.181.59|:80&hellip; connected.
HTTP request sent, awaiting response&hellip; 404 Not Found
Remote file does not exist &ndash; broken link!!!</p>

<p>7、增加重连次数用Wget -tries</p>

<p>在网络有问题的情况次选项尤其有用，默认是wget会重连20次以成功完成下载，我们可以把他增加为我们期待的次数</p>

<p>wget &ndash;tries=100 DOWNLOAD-URL</p>

<p>8、下载多个文件/URLS用wget -i</p>

<p>首先把所有要下载的文件或者URL存到一个记事本中，比如aa.txt，里面内容如下</p>

<p>URL1
URL2
URL3
URL4
接下来输入如下代码就可以批量下载了</p>

<p>wget -i aa.txt</p>

<p>9、下载一个完整的网站用wget -mirror</p>

<p>以下实现是你想完整的下载一个网站用于本地浏览</p>

<p>wget &ndash;mirror  -p &ndash;convert-links -P LOCAL-DIR WEBSITE-URL
&ndash;mirror:打开镜像选项</p>

<p>-p:下载所有用于显示给定网址所必须的文件</p>

<p>&ndash;convert-links：下载以后，转换链接用于本地显示</p>

<p>-P LOCAL_DIR：保存所有的文件或目录到指定的目录下</p>

<p>10、保存输出到日志文件而不是标准输出用wget -o</p>

<p>当你想要把信息保存到一个文件而不是在终端显示时用以下代码。</p>

<p>wget -o download.log DOWNLOAD-URL</p>

<p>11、当超过指定大小时终止下载用wget -Q</p>

<p>当文件已下载10M，此时你想停止下载可以使用下面的命令行</p>

<p>wget -Q10m -i FILE-WHICH-HAS-URLS
注意：此选项只能在下载多个文件时有用，当你下载一个文件时没用。</p>

<p>12、下载特定文件类型的文件用wget -r -A</p>

<p>你可以用此方法下载一下文件：</p>

<p>~从一个网站下载所有图片
~从一个网站下载所有视频</p>

<p>~从一个网站下载所有PDF文件</p>

<p>wget -r -A.pdf <a href="http://url-to-webpage-with-pdfs/">http://url-to-webpage-with-pdfs/</a></p>

<p>13、指定不下载某一类型的文件用wget &ndash;reject</p>

<p>你发现一个网站很有用，但是你不想下载上面的图片，因为太占流量，此时你可以用如下命令。</p>

<p>wget &ndash;reject=gif WEBSITE-TO-BE-DOWNLOADED</p>

<p>14、用wget实现FTP下载</p>

<p>匿名FTP下载用</p>

<p>wget ftp-url
有用户名和密码的FTP下载</p>

<p>wget &ndash;ftp-user=USERNAME &ndash;ftp-password=PASSWORD DOWNLOAD-URL</p>

<p>15、wget下载有的资源时必须用选项 &ndash;no-check-certificate，否则会提示没有认证不允许下载</p>

<p>wget &ndash;no-check-certificate URL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Log Geek]]></title>
    <link href="http://livv.github.io/blog/2013/06/21/git-log-geek/"/>
    <updated>2013-06-21T14:21:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/06/21/git-log-geek</id>
    <content type="html"><![CDATA[<ul>
<li>打开.gitconfig文件(该文件在用户目录下面)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim .gitconfig</span></code></pre></td></tr></table></div></figure>


<ul>
<li>配置gitconfig</li>
</ul>


<p>在打开的文件中加入下面的命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[alias]
</span><span class='line'>       lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查看配置后的log</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git lg</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在log中查看哪一行被修发了</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git lg -p</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Terminal 彩色]]></title>
    <link href="http://livv.github.io/blog/2013/06/13/mac-terminal-color/"/>
    <updated>2013-06-13T13:49:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/06/13/mac-terminal-color</id>
    <content type="html"><![CDATA[<h3>彩色化ls的输出</h3>

<p>Mac中BSD的ls命令可以使用-G参数彩色化输出的文件列表，需要配置LSCOLORS环境变量定义颜色，具体配置方法可以输入man ls查看。</p>

<p>不过，我推荐安装Linux使用的GNU Coreutils替换Mac的ls命令，因为：</p>

<ul>
<li>Coreutils提供了配置工具，定义颜色代码更加方便；</li>
<li>Coreutils包含的不仅仅是ls，同时作为Linux用户，我更习惯于使用GNU的各种shell工具。</li>
</ul>


<hr />

<ul>
<li>通过Homebrew安装Coreutils</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install xz coreutils</span></code></pre></td></tr></table></div></figure>


<p>注：Coreutils并不依赖于xz，但它的源码是用xz格式压缩的，安装xz才能解压。</p>

<ul>
<li>生成颜色定义文件</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdircolors --print-database &gt; ~/.dir_colors</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在<code>~/.bash_profile</code>配置文件中加入以下代码</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if brew list | grep coreutils &gt; /dev/null ; then
</span><span class='line'>  PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"
</span><span class='line'>  alias ls='ls -F --show-control-chars --color=auto'
</span><span class='line'>  eval `gdircolors -b $HOME/.dir_colors`
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>


<p>gdircolor的作用就是设置ls命令使用的环境变量LS_COLORS（BSD是LSCOLORS），我们可以修改~/.dir_colors自定义文件的颜色，此文件中的注释已经包含各种颜色取值的说明。</p>

<ul>
<li>grep高亮显示关键字</li>
</ul>


<p>这个很简单，加上<code>--color</code>参数就可以了，为了使用方便，可以在<code>~/.bash_profile</code>配置文件中加上alias定义。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias grep='grep --color'
</span><span class='line'>alias egrep='egrep --color'
</span><span class='line'>alias fgrep='fgrep --color'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Vim语法高亮</li>
</ul>


<p>在Vim中输入命令:syntax on激活语法高亮，若需要Vim启动时自动激活，在<code>~/.vimrc</code>中添加一行<code>syntax on</code>即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew Uninstall]]></title>
    <link href="http://livv.github.io/blog/2013/06/13/homebrew-uninstall/"/>
    <updated>2013-06-13T13:15:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/06/13/homebrew-uninstall</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd `brew –prefix`
</span><span class='line'>rm -rf Cellar
</span><span class='line'>brew prune
</span><span class='line'>rm -rf Library .git .gitignore bin/brew README.md share/man/man1/brew
</span><span class='line'>rm -rf ~/Library/Caches/Homebrew</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSPredicate 的用法]]></title>
    <link href="http://livv.github.io/blog/2013/05/08/nspredicate/"/>
    <updated>2013-05-08T09:22:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/05/08/nspredicate</id>
    <content type="html"><![CDATA[<p>一般来说这种情况还是蛮多的，比如你从文件中读入了一个array1，然后想把程序中的一个array2中符合array1中内容的元素过滤出来。
正 常傻瓜一点就是两个for循环，一个一个进行比较，这样效率不高，而且代码也不好看。
其实一个循环或者无需循环就可以搞定了，那就需要用搞 NSPredicate这个类了～膜拜此类～</p>

<h5>例子一，一个循环</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSArray *arrayFilter = [NSArray arrayWithObjects:@"pict", @"blackrain", @"ip", nil];
</span><span class='line'>NSArray *arrayContents = [NSArray arrayWithObjects:@"I am a picture.", @"I am a guy", @"I am gagaga", @"ipad", @"iphone", nil];</span></code></pre></td></tr></table></div></figure>


<p>我想过滤arrayContents的话只要循环 arrayFilter就好了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int i = 0, count = [arrayFilter count];
</span><span class='line'>for(i = 0; i &lt; count; i ++)
</span><span class='line'>{
</span><span class='line'>NSString *arrayItem = (NSString *)[arrayFilter objectAtIndex:i];
</span><span class='line'>NSPredicate *filterPredicate = [[NSPredicate predicateWithFormat:@"SELF CONTAINS %@", arrayItem];
</span><span class='line'>NSLog(@"Filtered array with filter %@, %@", arrayItem, [arrayContents filteredArrayUsingPredicate:filterPredicate]);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>当然以上代码中arrayContent最好用mutable 的，这样就可以直接filter了，NSArray是不可修改的。</p>

<h5>例子二，无需循环</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSArray *arrayFilter = [NSArray arrayWithObjects:@"abc1", @"abc2", nil];
</span><span class='line'>NSArray *arrayContent = [NSArray arrayWithObjects:@"a1", @"abc1", @"abc4", @"abc2", nil];
</span><span class='line'>NSPredicate *thePredicate = [NSPredicate predicateWithFormat:@"NOT (SELF in %@)", arrayFilter];
</span><span class='line'>[arrayContent filterUsingPredicate:thePredicate];</span></code></pre></td></tr></table></div></figure>


<p>这样arrayContent过滤出来的就是不包含 arrayFilter中的所有item了。</p>

<h5>生成文件路径下文件集合列表</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSFileManager *fileManager = [NSFileManager defaultManager];
</span><span class='line'>NSString *defaultPath = [[NSBundle mainBundle] resourcePath];
</span><span class='line'>NSError *error;
</span><span class='line'>NSArray *directoryContents = [fileManager contentsOfDirectoryAtPath:defaultPath error:&error]</span></code></pre></td></tr></table></div></figure>


<p><code>match的用法</code></p>

<ul>
<li>简单比较</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *match = @"imagexyz-999.png";
</span><span class='line'>NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF == %@", match];
</span><span class='line'>NSArray *results = [directoryContents filteredArrayUsingPredicate:predicate];﻿</span></code></pre></td></tr></table></div></figure>


<ul>
<li>match里like的用法（类似Sql中的用法）</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *match = @"imagexyz*.png";
</span><span class='line'>NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF like %@", match];
</span><span class='line'>NSArray *results = [directoryContents filteredArrayUsingPredicate:predicate];﻿</span></code></pre></td></tr></table></div></figure>


<ul>
<li>大小写比较</li>
</ul>


<p>［c］表示忽略大小写，［d］表示忽略重音，可以在一起使用，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *match = @"imagexyz*.png";
</span><span class='line'>NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF like[cd] %@", match];
</span><span class='line'>NSArray *results = [directoryContents filteredArrayUsingPredicate:predicate];﻿</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用正则</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *match = @"imagexyz-\\d{3}\\.png";  //imagexyz－123.png
</span><span class='line'>NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF matches %@", match];
</span><span class='line'>NSArray *results = [directoryContents filteredArrayUsingPredicate:predicate];﻿</span></code></pre></td></tr></table></div></figure>


<h5>总结：</h5>

<ol>
<li>当使用聚合类的操作符时是可以不需要循环的</li>
<li>当使用单个比较类的操作符时可以一个循环来搞定</li>
</ol>


<p>PS，例子 一中尝试使用[@&ldquo;SELF CONTAINS %@&rdquo;, arrayFilter] 来过滤会挂调，因为CONTAINS时字符串比较操作符，不是集合操作符。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[25个增强iOS应用程序性能的提示和技巧]]></title>
    <link href="http://livv.github.io/blog/2013/04/12/25-ios-skill/"/>
    <updated>2013-04-12T11:38:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/04/12/25-ios-skill</id>
    <content type="html"><![CDATA[<p><a href="http://beyondvincent.com">来源</a></p>

<ol>
<li>使用ARC进行内存管理</li>
<li>在适当的情况下使用reuseIdentifier</li>
<li>尽可能将View设置为不透明（Opaque）</li>
<li>避免臃肿的XIBs</li>
<li>不要阻塞主线程</li>
<li>让图片的大小跟UIImageView一样</li>
<li>选择正确的集合</li>
<li>使用GZIP压缩</li>
<li>重用和延迟加载View</li>
<li>缓存、缓存、缓存</li>
<li>考虑绘制</li>
<li>处理内存警告</li>
<li>重用花销很大的对象</li>
<li>使用Sprite Sheets</li>
<li>避免重新处理数据</li>
<li>选择正确的数据格式</li>
<li>设置适当的背景图片</li>
<li>降低Web内容的影响</li>
<li>设置阴影路径</li>
<li>优化TableView</li>
<li>选择正确的数据存储方式</li>
<li>加速启动时间</li>
<li>使用Autorelease Pool</li>
<li>缓存图片 — 或者不缓存</li>
<li>尽量避免Date格式化</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell_manual]]></title>
    <link href="http://livv.github.io/blog/2013/03/15/shell-manual/"/>
    <updated>2013-03-15T12:34:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/03/15/shell-manual</id>
    <content type="html"><![CDATA[<h3>一些强大的命令</h3>

<ul>
<li><code>!$</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>!$是一个特殊的环境变量，它代表了上一个命令的最后一个字符串。如：你可能会这样：
</span><span class='line'>$mkdir mydir
</span><span class='line'>$mv mydir yourdir
</span><span class='line'>$cd yourdir
</span><span class='line'>可以改成：
</span><span class='line'>$mkdir mydir
</span><span class='line'>$mv !$ yourdir
</span><span class='line'>$cd !$</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>sudo !!</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>以root的身份执行上一条命令 。
</span><span class='line'>场景举例：比如Ubuntu里用apt-get安装软件包的时候是需要root身份的，我们经常会忘记在apt-get前加sudo。每次不得不加上sudo再重新键入这行命令，这时可以很方便的用sudo !!完事。
</span><span class='line'>（陈皓注：在shell下，有时候你会输入很长的命令，你可以使用!xxx来重复最近的一次命令，比如，你以前输入过，vi /where/the/file/is, 下次你可以使用 !vi 重得上次最近一次的vi命令。）</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>cd –</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>回到上一次的目录 。
</span><span class='line'>场景举例：当前目录为/home/a，用cd ../b切换到/home/b。这时可以通过反复执行cd –命令在/home/a和/home/b之间来回方便的切换。</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>‘ALT+.’ or ‘&lt;ESC&gt; .’</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>热建alt+. 或 esc+. 可以把上次命令行的参数给重复出来。</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>^old^new</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>替换前一条命令里的部分字符串。
</span><span class='line'>场景：echo "wanderful"，其实是想输出echo "wonderful"。只需要^a^o就行了，对很长的命令的错误拼写有很大的帮助。（陈皓注：也可以使用 !!:gs/old/new）</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>du -s * | sort -n | tail</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>列出当前目录里最大的10个文件。</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>:w !sudo tee %</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>在vi中保存一个只有root可以写的文件</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>&gt; file.txt</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>创建一个空文件，比touch短。</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>在命令行前加空格，该命令不会进入history里。</p></li>
<li><p><code>echo “ls -l” | at midnight</code></p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>在某个时间运行某个命令。</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>ps aux | sort -nk +4 | tail</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>列出头十个最耗内存的进程</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>man ascii</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>显示ascii码表。
</span><span class='line'>场景：忘记ascii码表的时候还需要google么?尤其在天朝网络如此“顺畅”的情况下，就更麻烦在GWF多应用一次规则了，直接用本地的man ascii吧。</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>ssh user@server bash &lt; /path/to/local/script.sh</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>在远程机器上运行一段脚本。这条命令最大的好处就是不用把脚本拷到远程机器上。</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>python -m SimpleHTTPServer</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>一句话实现一个HTTP服务，把当前目录设为HTTP服务目录，可以通过http://localhost:8000访问 这也许是这个星球上最简单的HTTP服务器的实现了。</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Launchctl Manual]]></title>
    <link href="http://livv.github.io/blog/2013/03/12/launchctl-manual/"/>
    <updated>2013-03-12T13:54:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/03/12/launchctl-manual</id>
    <content type="html"><![CDATA[<h3>相关目录</h3>

<ul>
<li>/System/Library/LaunchDaemons 操作系统，用户登录前生效，以 root 身份执行任务</li>
<li>/System/Library/LaunchAgents 操作系统，用户登录后生效，以 root 身份执行任务</li>
<li>/Library/LaunchDaemons 系统管理员，用户登录前生效，以 root 身份执行任务</li>
<li>/Library/LaunchAgents 系统管理员，用户登录后生效，以 root 身份执行任务</li>
<li>~/Library/LaunchAgents 当前用户，用户登录后生效，以当前登录用户身份执行任务
使任务生效</li>
</ul>


<p>将 plist 文件按需要放置在上文的相关目录中</p>

<h3>使任务生效</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>launchctl load &lt;plist path&gt;</span></code></pre></td></tr></table></div></figure>


<p>执行上述操作后任务会立即生效，且重启系统后也会自动生效。如果 plist 没有放在指定的目录，重启系统后不会再生效。</p>

<p>如果 plist 存在 Key Disabled，且其值为 true，launchctl load 会提示 nothing found to load，系统启动时也不会自动生效人物，如果要手动强制启动，忽略 Disabled 为 true 带来的影响，传递 -wF 参数给 launchctl 即可。</p>

<h3>使任务失效</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>launchctl unload &lt;plist path&gt;</span></code></pre></td></tr></table></div></figure>


<p>将相关 plist 文件从原有目录中移除
执行上述操作后，任务会立即失效，plist 文件不会被移除，但是如果不将其从相关目录移走的话，重启系统后任务仍然会自动生效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[密码安全存储解决方案]]></title>
    <link href="http://livv.github.io/blog/2013/01/23/store-password-security/"/>
    <updated>2013-01-23T15:40:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/01/23/store-password-security</id>
    <content type="html"><![CDATA[<p>来源<a href="http://www.williamlong.info/archives/3224.html">月光博客</a></p>

<p>自己留个备份 ^_^</p>

<h3>菜鸟方案：</h3>

<p>　　直接存储用户密码的明文或者将密码加密存储。</p>

<p>　　曾经有一次我在某知名网站重置密码，结果邮件中居然直接包含以前设置过的密码。我和客服咨询为什么直接将密码发送给用户，客服答曰：“减少用户步骤，用户体验更好”；再问“管理员是否可以直接获知我的密码”， 客服振振有词：“我们用XXX算法加密过的，不会有问题的”。 殊不知，密码加密后一定能被解密获得原始密码，因此，该网站一旦数据库泄露，所有用户的密码本身就大白于天下。</p>

<p>　　以后看到这类网站，大家最好都绕道而走，因为一家“暴库”，全部遭殃。
　　</p>

<h3>入门方案：</h3>

<p>　　将明文密码做单向哈希后存储。</p>

<p>　　单向哈希算法有一个特性，无法通过哈希后的摘要(digest)恢复原始数据，这也是“单向”二字的来源，这一点和所有的加密算法都不同。常用的单向哈希算法包括SHA-256，SHA-1，MD5等。例如，对密码“passwordhunter”进行SHA-256哈希后的摘要(digest)如下：
“bbed833d2c7805c4bf039b140bec7e7452125a04efa9e0b296395a9b95c2d44c”</p>

<p>　　可能是“单向”二字有误导性，也可能是上面那串数字唬人，不少人误以为这种方式很可靠， 其实不然。</p>

<p>　　单向哈希有两个特性：</p>

<p>　　1）从同一个密码进行单向哈希，得到的总是唯一确定的摘要</p>

<p>　　2）计算速度快。随着技术进步，尤其是显卡在高性能计算中的普及，一秒钟能够完成数十亿次单向哈希计算</p>

<p>　　结合上面两个特点，考虑到多数人所使用的密码为常见的组合，攻击者可以将所有密码的常见组合进行单向哈希，得到一个摘要组合，然后与数据库中的摘要进行比对即可获得对应的密码。这个摘要组合也被称为rainbow table。</p>

<p>　　更糟糕的是，一个攻击者只要建立上述的rainbow table，可以匹配所有的密码数据库。仍然等同于一家“暴库”，全部遭殃。以后要是有某家厂商宣布“我们的密码都是哈希后存储的，绝对安全”，大家对这个行为要特别警惕并表示不屑。有兴趣的朋友可以搜索下，看看哪家厂商躺着中枪了。
　　</p>

<h3>进阶方案：</h3>

<p>　　将明文密码混入“随机因素”，然后进行单向哈希后存储，也就是所谓的“Salted Hash”。</p>

<p>　　这个方式相比上面的方案，最大的好处是针对每一个数据库中的密码，都需要建立一个完整的rainbow table进行匹配。 因为两个同样使用“passwordhunter”作为密码的账户，在数据库中存储的摘要完全不同。</p>

<p>　　10多年以前，因为计算和内存大小的限制，这个方案还是足够安全的，因为攻击者没有足够的资源建立这么多的rainbow table。 但是，在今日，因为显卡的恐怖的并行计算能力，这种攻击已经完全可行。
　　</p>

<h3>专家方案：</h3>

<p>　　故意增加密码计算所需耗费的资源和时间，使得任何人都不可获得足够的资源建立所需的rainbow table。</p>

<p>　　这类方案有一个特点，算法中都有个因子，用于指明计算密码摘要所需要的资源和时间，也就是计算强度。计算强度越大，攻击者建立rainbow table越困难，以至于不可继续。</p>

<p>　　这类方案的常用算法有三种：</p>

<p>　　1）PBKDF2(Password-Based Key Derivation Function)</p>

<p>　　PBKDF2简单而言就是将salted hash进行多次重复计算，这个次数是可选择的。如果计算一次所需要的时间是1微秒，那么计算1百万次就需要1秒钟。假如攻击一个密码所需的rainbow table有1千万条，建立所对应的rainbow table所需要的时间就是115天。这个代价足以让大部分的攻击者忘而生畏。</p>

<p>　　美国政府机构已经将这个方法标准化，并且用于一些政府和军方的系统。 这个方案最大的优点是标准化，实现容易同时采用了久经考验的SHA算法。</p>

<p>　　2） bcrypt</p>

<p>　　bcrypt是专门为密码存储而设计的算法，基于Blowfish加密算法变形而来，由Niels Provos和David Mazières发表于1999年的USENIX。</p>

<p>　　bcrypt最大的好处是有一个参数（work factor)，可用于调整计算强度，而且work factor是包括在输出的摘要中的。随着攻击者计算能力的提高，使用者可以逐步增大work factor，而且不会影响已有用户的登陆。</p>

<p>　　bcrypt经过了很多安全专家的仔细分析，使用在以安全著称的OpenBSD中，一般认为它比PBKDF2更能承受随着计算能力加强而带来的风险。bcrypt也有广泛的函数库支持，因此我们建议使用这种方式存储密码。</p>

<p>　　3) scrypt</p>

<p>　　scrypt是由著名的FreeBSD黑客 Colin Percival为他的备份服务 Tarsnap开发的。</p>

<p>　　和上述两种方案不同，scrypt不仅计算所需时间长，而且占用的内存也多，使得并行计算多个摘要异常困难，因此利用rainbow table进行暴力攻击更加困难。scrypt没有在生产环境中大规模应用，并且缺乏仔细的审察和广泛的函数库支持。但是，scrypt在算法层面只要没有破绽，它的安全性应该高于PBKDF2和bcrypt。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 OS X 系统中使用 Sips 命令批量处理图片]]></title>
    <link href="http://livv.github.io/blog/2013/01/10/sips-on-osx/"/>
    <updated>2013-01-10T12:54:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/01/10/sips-on-osx</id>
    <content type="html"><![CDATA[<p>苹果系统自带的图片处理命令<strong><em>sips</em></strong>。</p>

<p>比如，你想要将某文件夹的 n 张大尺寸JPG图片都缩小成宽度为600px的图片，高度自动按比例缩放。那么命令则为(假设文件夹的路径为 ~/Desktop/Test)：</p>

<pre><code>sips -Z 600 ~/Desktop/Test/*.JPG
</code></pre>

<p>执行完成之后，你桌面上Test文件夹中的所有JPG图片都缩小城宽度为600px的小尺寸版本了。另外，sips 还有很多功能有待你挖掘，比如你还可以指定高度和宽度(注意z需要小写)：</p>

<pre><code>sips -z 300 600 ~/Desktop/Test/*.JPG
</code></pre>

<p>你还可以用 sips 命令批量旋转图片，默认旋转方式为顺时针，下面是将图片顺时针旋转90度的方法：</p>

<pre><code>sips -r 90 ~/Desktop/Test/*.JPG
</code></pre>

<p>其实，你甚至可以以不规则的角度旋转，比如旋转120度，大家自己试试是什么效果吧。</p>

<p>还可以用来翻转图片，不管是水平翻转还是垂直翻转都可以。水平翻转命令为：</p>

<pre><code>sips -f horizontal ~/Desktop/Test/*.JPG
</code></pre>

<p>垂直翻转命令为：</p>

<pre><code>sips -f vertical ~/Desktop/Test/*.JPG
</code></pre>

<blockquote><p>本该淡淡然~~~</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Linux Date]]></title>
    <link href="http://livv.github.io/blog/2013/01/05/mac-linux-date/"/>
    <updated>2013-01-05T11:39:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/01/05/mac-linux-date</id>
    <content type="html"><![CDATA[<h3>Mac和Linux下，分别如何用date命令表示明天</h3>

<h5>Linux 平台，用date表示明天</h5>

<pre><code>date -d "tomorrow"
</code></pre>

<p>类似的有：</p>

<pre><code>date -d "yesterday"    # 顯示昨天的時間
date -d "tomorrow"     # 顯示明天的時間
date -d "1 hour"       # 顯示一小時後的時間
date -d "2 day ago"    # 顯示二天前的時間
date -d "3 month ago"  # 顯示三個月前的時間
date -d "2 year"       # 顯示二年後的時間
date -d "last friday"  # 顯示上個星期五的時間
date -d "next week"    # 顯示下週的時間
date -d "next month"   # 顯示下個月的時間
date -d "fortnight"    # 顯示二週後的時間
date -d "7/1 3 week"   # 顯示 7/1 起算的第三週
</code></pre>

<h5>Mac 平台，用date表示明天</h5>

<pre><code>#Mac下的date能接受-r选项，-r 接受多少秒作为其参数
#86400 = 60 * 60 * 24 (s) = 24 (h)
date -r $(expr $(date '+%s') + 86400)
</code></pre>

<blockquote><p>本该淡淡然~~~</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In a Word]]></title>
    <link href="http://livv.github.io/blog/2012/12/19/in-a-word/"/>
    <updated>2012-12-19T10:53:00+08:00</updated>
    <id>http://livv.github.io/blog/2012/12/19/in-a-word</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://xingfuke.net/xingfuke766">选择之困惑——为何多即是少？</a></li>
<li><a href="http://www.williamlong.info/archives/3062.html">程序员真的很懒&hellip;</a></li>
<li>自卑大多来源于虚荣</li>
<li>语言,不过是人们对认知世界的一种表达方式</li>
<li>一切技术的进步，都是为了满足人们日益变懒的需求</li>
<li>“the medium is the message” (媒介才是信息)。真正带来巨大影响的，不是内容（content），而是媒介（medium）本身。</li>
</ul>


<blockquote><p>本该淡淡然~~~</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[info.plist常用key介绍]]></title>
    <link href="http://livv.github.io/blog/2012/08/24/info-plist-common-key/"/>
    <updated>2012-08-24T16:41:00+08:00</updated>
    <id>http://livv.github.io/blog/2012/08/24/info-plist-common-key</id>
    <content type="html"><![CDATA[<ul>
<li>UIRequiresPersistentWiFi 在程序中弹出wifi选择的key（系统设置中需要将wifi提示打开）</li>
<li>UIAppFonts 内嵌字体<a href="http://www.minroad.com/?p=412">详细介绍</a></li>
<li>UIApplicationExitsOnSuspend 程序是否在后台运行，自己在进入后台的时候exit(0)是很傻的办法</li>
<li>UIBackgroundModes 后台运行时的服务，具体看iOS4的后台介绍</li>
<li>UIDeviceFamily array类型（1为iPhone和iPod touch设备，2为iPad)</li>
<li>UIFileSharingEnabled 开启itunes共享document文件夹</li>
<li>UILaunchImageFile 相当于Default.png（更名而已）</li>
<li>UIPrerenderedIcon icon上是否有高光</li>
<li>UIRequiredDeviceCapabilities 设备需要的功能<a href="http://developer.apple.com/library/mac/#documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html%23//apple_ref/doc/uid/TP40009252-SW3">具体点击这里查看</a></li>
<li>UIStatusBarHidden 状态栏隐藏（和程序内的区别是在于显示Default.png已经生效）</li>
<li>UIStatusBarStyle 状态栏类型</li>
<li>UIViewEdgeAntialiasing 是否开启抗锯齿</li>
<li>CFBundleDisplayName app显示名</li>
<li>CFBundleIconFile、CFBundleIconFiles 图标</li>
<li>CFBundleName 与CFBundleDisplayName的区别在于这个是短名，16字符之内</li>
<li>CFBundleVersion 版本</li>
<li>CFBundleURLTypes 自定义url，用于利用url弹回程序</li>
<li>CFBundleLocalizations 本地资源的本地化语言，用于itunes页面左下角显示本地话语种</li>
<li>CFBundleDevelopmentRegion 也是本地化相关，如果用户所在地没有相应的语言资源，则用这个key的value来作为默认</li>
</ul>


<blockquote><p>本该淡淡然~~~</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone 系统常用目录路径位置]]></title>
    <link href="http://livv.github.io/blog/2012/08/16/iphone-system-common-dir/"/>
    <updated>2012-08-16T21:09:00+08:00</updated>
    <id>http://livv.github.io/blog/2012/08/16/iphone-system-common-dir</id>
    <content type="html"><![CDATA[<ol>
<li>【/Applications】
常用软件的安装目录</li>
<li>【/private /var/ mobile/Media /iphone video Recorder】
录像文件存放目录</li>
<li>【/private /var/ mobile/Media /DCIM】
相机拍摄的照片文件存放目录</li>
<li>【/private/var/ mobile /Media/iTunes_Control/Music】
iTunes上传的多媒体文件（例如MP3、MP4等）存放目录，文件没有被修改，但是文件名字被修改了，直接下载到电脑即可读取。</li>
<li>【/private /var/root/Media/EBooks】
电子书存放目录</li>
<li>【/Library/Ringtones】
系统自带的来电铃声存放目录（用iTunes将文件转换为ACC文件，把后缀名改成.m4r,用iPhone_PC_Suite传到/Library/Ringtones即可）</li>
<li>【/private/var/ mobile /Library/AddressBook】
系统电话本的存放目录。</li>
<li>【/private /var/ mobile/Media /iphone Recorder】
录音文件存放目录</li>
<li>【/Applications/Preferences.app/zh_CN.lproj】
软件Preferences.app的中文汉化文件存放目录</li>
<li>【/Library/Wallpaper】
系统墙纸的存放目录</li>
<li>【/System/Library/Audio/UISounds】
系统声音文件的存放目录</li>
<li>【/private/var/root/Media/PXL】
ibrickr上传安装程序建立的一个数据库，估计和windows的uninstall记录差不多。</li>
<li>【/bin】
和linux系统差不多，是系统执行指令的存放目录。</li>
<li>【/private/var/ mobile /Library/SMS】
系统短信的存放目录</li>
<li>【/private/var/run】
系统进程运行的临时目录？（查看这里可以看到系统启动的所有进程）</li>
<li>【/private/var/logs/CrashReporter】
系统错误记录报告</li>
<li>【/System/Library/Fonts/Cache】锁屏时钟字体体 ，记得备份原始的字体，然后将 &ldquo;LockClock.ttf&rdquo; 复制进去，然后重启或者respring iphone</li>
</ol>


<hr />

<p>分割线（补充说明）</p>

<hr />

<ol>
<li>/private/var/mobile 　新刷完的机器，要在这个文件夹下建一个Documents的目录。</li>
<li>/private/var/mobile/Applications 　通过AppStore和iTunes安装的程序都在里面。</li>
<li>/private/var/stash 　这个文件夹下的Applications目录里面是所有通过Cydia和app安装的程序，Ringtones目录里是所有的手机铃音，自制铃音直接拷在里面即可，Themes目录里是所有Winterboard主题，可以手工修改。</li>
<li>/var/mobile/Media/ROMs/GBA 　gpsPhone模拟器存放rom的目录。</li>
<li>/var/mobile/Media/textReader 　textReader看书软件读取的电子书的存放路径。</li>
<li>/System/Library/Fonts/Cache（系统字体目录，要替换的字体放在该目录下，权限644不变）</li>
<li>/private/var/mobile/Media/Maps（离线地图目录，把地图文件夹放到该目录下，文件夹赋予777权限）</li>
<li>/private/var/mobile/Library/Downloads （ipa文件存放目录，用Installous安装）</li>
<li>/private/var/mobile/Library/Keyboard （系统拼音字库文件位置）</li>
<li>/var/stash/Themes.XXXXXX （winterboard主题文件存放路径）</li>
<li>/private/var/mobile/Media/DCIM/999APPLE （系统自带截屏文件存放路径）</li>
</ol>


<hr />

<p>来给个备份时候常用的路径（摘抄通杀版~）</p>

<ul>
<li>/private/var/mobile/Library/AddressBook → 联系人</li>
<li>/private/var/mobile/Library/CallHistory → 通话记录</li>
<li>/private/var/mobile/Library/SMS → 短信</li>
<li>/private/var/mobile/Library/Notes → 备忘录</li>
<li>/private/var/mobile/Library/Safari → Safari 浏览器保存的书签等</li>
<li>/private/var/mobile/Library/Mail → 电子邮件</li>
<li>/private/var/mobile/Library/MCallShow →信安易来电秀注册文件</li>
<li>/private/var/mobile/Media/DCIM →照片里面的胶卷</li>
<li>/private/var/mobile/Media/Photos →照片里面的图片</li>
<li>/private/var/mobile/Media/Videos →Cycorder摄像机软件拍摄文件保存路径（可以用WINSCP把MP4文件传到这里用它来看哟^_^）</li>
<li>/private/var/mobile/Library/Preferences com.apple.mobilephone.speeddial.plist →个人收藏（快速拨号）</li>
<li>/private/var/mobile/Media/Recordings →语音备忘录</li>
</ul>


<blockquote><p>本该淡淡然~~~</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repack of Git Repository Fails]]></title>
    <link href="http://livv.github.io/blog/2012/04/24/repack-of-git-repository-fails/"/>
    <updated>2012-04-24T11:00:00+08:00</updated>
    <id>http://livv.github.io/blog/2012/04/24/repack-of-git-repository-fails</id>
    <content type="html"><![CDATA[<h3>question</h3>

<p>I have a git repository residing on a server with limited memory. When I try to clone an existing repository from the server I get the following error</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Cloning into 'carRecognition'...
</span><span class='line'>remote: Counting objects: 3012, done.
</span><span class='line'>error: git upload-pack: git-pack-objects died with error.
</span><span class='line'>fatal: git upload-pack: aborting due to possible repository corruption on the remote side.
</span><span class='line'>remote: aborting due to possible repository corruption on the remote side.
</span><span class='line'>fatal: early EOF
</span><span class='line'>fatal: index-pack failed</span></code></pre></td></tr></table></div></figure>


<h3>solution</h3>

<p>Your solution has got you a working copy locally and remotely, but will cause problems again when the remote repository decides to repack itself again. Fortunately, you can set config options that will reduce the amount of memory needed for repacking in both repositories &ndash; these essentially make the command line parameters that you added into the default options when repacking. So, you should log in to the remote, change into the repository and do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config pack.windowMemory 10m
</span><span class='line'>git config pack.packSizeLimit 20m</span></code></pre></td></tr></table></div></figure>


<p>You may want to do the same on your local repository. (Incidentally I guess that either your repository is very large or these are machines with little memory - these values seem very low to me.)</p>

<p>For what it&rsquo;s worth, when getting malloc failures on repacking very large repositories in the past, I&rsquo;ve also changed the values of core.packedgitwindowsize, core.packedgitlimit, core.deltacachesize, pack.deltacachesize, pack.window and pack.threads but it sounds as if you don&rsquo;t need any further options :)</p>

<blockquote><p>本该淡淡然~~~</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Development on OS X Without Eclipse]]></title>
    <link href="http://livv.github.io/blog/2012/04/18/android-development-on-os-x-without-eclipse/"/>
    <updated>2012-04-18T23:44:00+08:00</updated>
    <id>http://livv.github.io/blog/2012/04/18/android-development-on-os-x-without-eclipse</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://blog.beyondthecorner.co.uk/2011/01/15/android-on-os-x-without-eclipse/">出处</a></li>
</ul>


<h3>介绍</h3>

<p>因为我只是想在OS X下编译Android项目，所以不需要IDE（主要是我不喜欢Eclipse）。首先搭建开发环境。 下面是详细步骤.</p>

<h3>Homebrew</h3>

<p>To get the ball rolling we’re going to start with everyone’s favourite missing package manager, <a href="(http://livv.github.com/blog/2012/02/16/homebrew/">Homebrew</a>. If you haven’t got Homebrew installed already then you’ll be glad to know that installation is pretty simple to do;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby -e "$(curl -fsSLk https://gist.github.com/raw/323731/install_homebrew.rb)"</span></code></pre></td></tr></table></div></figure>


<p>If you haven’t got Xcode installed yet this script will install it for you. If this is the case you may want to go get a drink as it may take some time.</p>

<h3>Android SDK</h3>

<p>Now that we have Homebrew installed we can get the Android SDK tools installed. Thanks to Homebrew this is a simple process and you don’t even have to visit a website, this appeals to the exceedingly lazy developer in me. Just go ahead and run;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install android</span></code></pre></td></tr></table></div></figure>


<p>Once Homebrew has installed the Android SDK you can just straight away run the android command thanks to Homebrew setting everything up for you. So go ahead and run the Android SDK and AVD manager by running android on the command line. Then you can make your AVD and install the desired versions of the Android SDK. You may need to update your android tools since it appears that the Homebrew formula is a little out of date with the current version, but this is simple enough to do.
At this point let’s create an android project to make sure that everything is ready to go. I created a HelloAndroid application targeted for Android 2.1;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>android create project --package com.example.helloandroid --activity HelloAndroid --target 3 --path &lt;path-to-project-folder&gt;/HelloAndroid</span></code></pre></td></tr></table></div></figure>


<p>Then to make sure that everything is set up right and working fire up your Android emulator and then run ant install. Once this is done go ahead and make sure the app runs on the emulator. Assuming this works then run ant uninstall to uninstall the app from the emulator.</p>

<h3>Apache Maven</h3>

<p>Whilst I do prefer to avoid a full blown IDE I do like some automation in places and Apache Maven is a big old help with this. The first thing to do is get maven installed, again thanks to Homebrew this is simple;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install maven</span></code></pre></td></tr></table></div></figure>


<p>Now we need to get the project set up with maven. We will be using the Maven Android Plugin to help us out. The first thing we need to do is remove the following files;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rm -r bin build.xml build.properties libs</span></code></pre></td></tr></table></div></figure>


<p>Next we setup our environment for the Maven Android Plugin. We need to set a ANDROID_HOME environment variable. In .bash_profile add the following line;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export ANDROID_HOME=`brew --prefix android`</span></code></pre></td></tr></table></div></figure>


<p>Setting up the project for use with maven needs the following pom.xml file created in the root of the project;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
</span><span class='line'>  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
</span><span class='line'>  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
</span><span class='line'>  &lt;groupId&gt;com.example.helloandroid&lt;/groupId&gt;
</span><span class='line'>  &lt;artifactId&gt;helloandroid&lt;/artifactId&gt;
</span><span class='line'>  &lt;packaging&gt;apk&lt;/packaging&gt;
</span><span class='line'>  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
</span><span class='line'>  &lt;name&gt;HelloAndroid&lt;/name&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;dependencies&gt;
</span><span class='line'>    &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;com.google.android&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;android&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;2.1.2&lt;/version&gt;
</span><span class='line'>      &lt;scope&gt;provided&lt;/scope&gt;
</span><span class='line'>    &lt;/dependency&gt;
</span><span class='line'>  &lt;/dependencies&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;build&gt;
</span><span class='line'>    &lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;
</span><span class='line'>    &lt;plugins&gt;
</span><span class='line'>      &lt;plugin&gt;
</span><span class='line'>        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class='line'>        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
</span><span class='line'>        &lt;configuration&gt;
</span><span class='line'>          &lt;source&gt;1.6&lt;/source&gt;
</span><span class='line'>          &lt;target&gt;1.6&lt;/target&gt;
</span><span class='line'>        &lt;/configuration&gt;
</span><span class='line'>      &lt;/plugin&gt;
</span><span class='line'>      &lt;plugin&gt;
</span><span class='line'>        &lt;groupId&gt;com.jayway.maven.plugins.android.generation2&lt;/groupId&gt;
</span><span class='line'>        &lt;artifactId&gt;maven-android-plugin&lt;/artifactId&gt;
</span><span class='line'>        &lt;configuration&gt;
</span><span class='line'>          &lt;sdk&gt;
</span><span class='line'>            &lt;path&gt;${env.ANDROID_HOME}&lt;/path&gt;
</span><span class='line'>            &lt;platform&gt;1.6&lt;/platform&gt;
</span><span class='line'>          &lt;/sdk&gt;
</span><span class='line'>          &lt;emulator&gt;
</span><span class='line'>             &lt;avd&gt;standard&lt;/avd&gt;
</span><span class='line'>             &lt;wait&gt;6000&lt;/wait&gt;
</span><span class='line'>          &lt;/emulator&gt;
</span><span class='line'>          &lt;deleteConflictingFiles&gt;true&lt;/deleteConflictingFiles&gt;
</span><span class='line'>        &lt;/configuration&gt;
</span><span class='line'>        &lt;extensions&gt;true&lt;/extensions&gt;
</span><span class='line'>      &lt;/plugin&gt;
</span><span class='line'>    &lt;/plugins&gt;
</span><span class='line'>  &lt;/build&gt;
</span><span class='line'>  
</span><span class='line'>&lt;/project&gt;</span></code></pre></td></tr></table></div></figure>


<p>Once the pom.xml file is created then we can see if it is all set up right by running;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn help:describe -Dplugin=android</span></code></pre></td></tr></table></div></figure>


<p>Running this should give details about goals available for the android maven plugin. For reference here are the goals;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Name: Maven Android Plugin - maven-android-plugin
</span><span class='line'>Description: Maven Plugin for Android
</span><span class='line'>Group Id: com.jayway.maven.plugins.android.generation2
</span><span class='line'>Artifact Id: maven-android-plugin
</span><span class='line'>Version: 2.8.3
</span><span class='line'>Goal Prefix: android
</span><span class='line'> 
</span><span class='line'>This plugin has 16 goals:
</span><span class='line'> 
</span><span class='line'>android:apk
</span><span class='line'>  Description: Creates the apk file. By default signs it with debug keystore.
</span><span class='line'>    Change that by setting configuration parameter
</span><span class='line'>    &lt;sign&gt;&lt;debug&gt;false&lt;/debug&gt;&lt;/sign&gt;.
</span><span class='line'> 
</span><span class='line'>android:deploy
</span><span class='line'>  Description: Deploys the built apk file, or another specified apk, to a
</span><span class='line'>    connected device.
</span><span class='line'>    Automatically performed when running mvn integration-test (or mvn install)
</span><span class='line'>    on a project with instrumentation tests.
</span><span class='line'> 
</span><span class='line'>android:deploy-dependencies
</span><span class='line'>  Description: Deploys all directly declared dependencies of &lt;type&gt;apk&lt;/type&gt;
</span><span class='line'>    in this project's pom.
</span><span class='line'>    Usually used in a project with instrumentation tests, to deploy the apk to
</span><span class='line'>    test onto the device before running the deploying and running the
</span><span class='line'>    instrumentation tests apk.
</span><span class='line'>    Automatically performed when running mvn integration-test (or mvn install)
</span><span class='line'>    on a project with instrumentation tests.
</span><span class='line'> 
</span><span class='line'>android:dex
</span><span class='line'>  Description: Converts compiled Java classes to the Android dex format.
</span><span class='line'> 
</span><span class='line'>android:emulator-start
</span><span class='line'>  Description: EmulatorStartMojo can start the Android Emulator with a
</span><span class='line'>    specified Android Virtual Device (avd).
</span><span class='line'> 
</span><span class='line'>android:emulator-stop
</span><span class='line'>  Description: EmulatorStartMojo can stop the Android Emulator with a
</span><span class='line'>    specified Android Virtual Device (avd).
</span><span class='line'> 
</span><span class='line'>android:generate-sources
</span><span class='line'>  Description: Generates R.java based on resources specified by the resources
</span><span class='line'>    configuration parameter.
</span><span class='line'>    Generates java files based on aidl files.
</span><span class='line'>     
</span><span class='line'>    If the configuration parameter deleteConflictingFiles is true (which it is
</span><span class='line'>    by default), this goal has the following side-effects:
</span><span class='line'>    - deletes any R.java files found in the source directory.
</span><span class='line'>    - deletes any .java files with the same name as an .aidl file found in the
</span><span class='line'>      source directory.
</span><span class='line'>    - deletes any Thumbs.db files found in the resource directory.
</span><span class='line'> 
</span><span class='line'>android:instrument
</span><span class='line'>  Description: Runs the instrumentation apk on device.
</span><span class='line'> 
</span><span class='line'>android:internal-integration-test
</span><span class='line'>  Description: Internal. Do not use.
</span><span class='line'>    Called automatically when the lifecycle reaches phase integration-test.
</span><span class='line'>    Figures out whether to call goals in this phase; and if so, calls
</span><span class='line'>    android:instrument.
</span><span class='line'> 
</span><span class='line'>android:internal-pre-integration-test
</span><span class='line'>  Description: Internal. Do not use.
</span><span class='line'>    Called automatically when the lifecycle reaches phase pre-integration-test.
</span><span class='line'>    Figures out whether to call goals in this phase; and if so, calls
</span><span class='line'>    android:deploy-dependencies and android:deploy.
</span><span class='line'> 
</span><span class='line'>android:pull
</span><span class='line'>  Description: Copy file/dir from device.
</span><span class='line'> 
</span><span class='line'>android:push
</span><span class='line'>  Description: Copy file/dir to device.
</span><span class='line'> 
</span><span class='line'>android:redeploy
</span><span class='line'>  Description: Redeploys the built apk file, or another specified apk, to a
</span><span class='line'>    connected device. This simply tries to undeploy the APK and re-deploy it.
</span><span class='line'> 
</span><span class='line'>android:undeploy
</span><span class='line'>  Description: Undeploys the built apk file, or another specified apk, from a
</span><span class='line'>    connected device.
</span><span class='line'> 
</span><span class='line'>android:unpack
</span><span class='line'>  Description: unpack library.
</span><span class='line'> 
</span><span class='line'>android:zipalign
</span><span class='line'>  Description: ZipalignMojo can run the zipalign command against the apk.</span></code></pre></td></tr></table></div></figure>


<p>If you see that then you are all set and ready to go. I’m hoping to get some more blog posts up about my development exploits on android. If you want to read more about the maven android plugin then have a look at their website <a href="http://code.google.com/p/maven-android-plugin.">http://code.google.com/p/maven-android-plugin.</a></p>

<blockquote><p>本该淡淡然~~~</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS Timing Start Script]]></title>
    <link href="http://livv.github.io/blog/2012/04/18/mac-os-timing-start-script/"/>
    <updated>2012-04-18T16:54:00+08:00</updated>
    <id>http://livv.github.io/blog/2012/04/18/mac-os-timing-start-script</id>
    <content type="html"><![CDATA[<p>前面的文章提到过<a href="http://livv.github.com/blog/2012/03/01/linux-crontab/">Linux Crontab</a>，用法几乎一样。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo crontab -e//回车后输入密码
</span><span class='line'>//进入VI编辑，输入
</span><span class='line'>* * * * * say hello//这个地方可以放脚本的路径
</span><span class='line'>保存即可。
</span><span class='line'>这样每分钟都会听到hello了</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>五个星星表示
</span><span class='line'>minute — 分钟，从 0 到 59 之间的任何整数 
</span><span class='line'>hour — 小时，从 0 到 23 之间的任何整数 
</span><span class='line'>day — 日期，从 1 到 31 之间的任何整数（如果指定了月份，必须是该月份的有效日期） 
</span><span class='line'>month — 月份，从 1 到 12 之间的任何整数（或使用月份的英文简写如 jan、feb 等等） 
</span><span class='line'>dayofweek — 星期，从 0 到 7 之间的任何整数，这里的 0 或 7 代表星期日（或使用星期的英文简写如 sun、mon 等等）</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>crontab -l显示目前所有的任务
</span><span class='line'>crontab -r删除所有的任务
</span><span class='line'>crontab -e编辑任务</span></code></pre></td></tr></table></div></figure>


<hr />

<ul>
<li>以上方法好像不能调用本地sh脚本，改用<code>~/Library/LaunchAgents/vv.redmine.bak.plist</code> 这样每天12:30调用<code>/Users/wei/architect/redmine_bak/redmine_bak.sh</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
</span><span class='line'>&lt;plist version="1.0"&gt;
</span><span class='line'>&lt;dict&gt;
</span><span class='line'>        &lt;key&gt;Label&lt;/key&gt;
</span><span class='line'>        &lt;string&gt;vv.redmine.bak&lt;/string&gt;
</span><span class='line'>        &lt;key&gt;ProgramArguments&lt;/key&gt;
</span><span class='line'>        &lt;array&gt;
</span><span class='line'>                &lt;string&gt;/Users/wei/architect/redmine_bak/redmine_bak.sh&lt;/string&gt;
</span><span class='line'>        &lt;/array&gt;
</span><span class='line'>        &lt;key&gt;StartCalendarInterval&lt;/key&gt;
</span><span class='line'>        &lt;array&gt;
</span><span class='line'>                &lt;dict&gt;
</span><span class='line'>                        &lt;key&gt;Minute&lt;/key&gt;
</span><span class='line'>                        &lt;integer&gt;30&lt;/integer&gt;
</span><span class='line'>                &lt;/dict&gt;
</span><span class='line'>                &lt;dict&gt;
</span><span class='line'>                        &lt;key&gt;Hour&lt;/key&gt;
</span><span class='line'>                        &lt;integer&gt;12&lt;/integer&gt;
</span><span class='line'>                &lt;/dict&gt;
</span><span class='line'>        &lt;/array&gt;
</span><span class='line'>&lt;/dict&gt;
</span><span class='line'>&lt;/plist&gt;</span></code></pre></td></tr></table></div></figure>


<blockquote><p>本该淡淡然~~~</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Auto Run Tomcat]]></title>
    <link href="http://livv.github.io/blog/2012/04/17/mac-auto-run-tomcat/"/>
    <updated>2012-04-17T17:22:00+08:00</updated>
    <id>http://livv.github.io/blog/2012/04/17/mac-auto-run-tomcat</id>
    <content type="html"><![CDATA[<ul>
<li>launchd_wrapper.sh</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'># NOTE: this is an OSX launchd wrapper shell script for Tomcat (to be placed in $CATALINA_HOME/bin)
</span><span class='line'>
</span><span class='line'>CATALINA_HOME=/Users/username/tomcat
</span><span class='line'>
</span><span class='line'>function shutdown() {
</span><span class='line'>    date
</span><span class='line'>    echo "Shutting down Tomcat"
</span><span class='line'>    $CATALINA_HOME/bin/catalina.sh stop
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>date
</span><span class='line'>echo "Starting Tomcat"
</span><span class='line'>export CATALINA_PID=/tmp/$$
</span><span class='line'>
</span><span class='line'># Uncomment to increase Tomcat's maximum heap allocation
</span><span class='line'># export JAVA_OPTS=-Xmx512M $JAVA_OPTS
</span><span class='line'>
</span><span class='line'>. $CATALINA_HOME/bin/catalina.sh start
</span><span class='line'>
</span><span class='line'># Allow any signal which would kill a process to stop Tomcat
</span><span class='line'>trap shutdown HUP INT QUIT ABRT KILL ALRM TERM TSTP
</span><span class='line'>
</span><span class='line'>echo "Waiting for `cat $CATALINA_PID`"
</span><span class='line'>wait `cat $CATALINA_PID`</span></code></pre></td></tr></table></div></figure>


<ul>
<li>org.apache.tomcat.plist</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
</span><span class='line'>&lt;plist version="1.0"&gt;&lt;!-- NOTE: place this file in /Library/LaunchDaemons --&gt;
</span><span class='line'>    &lt;dict&gt;
</span><span class='line'>        &lt;key&gt;Label&lt;/key&gt;
</span><span class='line'>        &lt;string&gt;org.apache.tomcat&lt;/string&gt;
</span><span class='line'>        &lt;key&gt;OnDemand&lt;/key&gt;
</span><span class='line'>        &lt;false/&gt;
</span><span class='line'>        &lt;key&gt;RunAtLoad&lt;/key&gt;
</span><span class='line'>        &lt;true/&gt;
</span><span class='line'>        &lt;key&gt;EnvironmentVariables&lt;/key&gt;
</span><span class='line'>        &lt;dict&gt;
</span><span class='line'>            &lt;key&gt;CATALINA_HOME&lt;/key&gt;
</span><span class='line'>            &lt;string&gt;/Users/username/tomcat&lt;/string&gt;
</span><span class='line'>            &lt;key&gt;JAVA_HOME&lt;/key&gt;
</span><span class='line'>            &lt;string&gt;/Library/Java/Home&lt;/string&gt;
</span><span class='line'>        &lt;/dict&gt;
</span><span class='line'>        &lt;key&gt;ProgramArguments&lt;/key&gt;
</span><span class='line'>        &lt;array&gt;
</span><span class='line'>            &lt;string&gt;/Users/username/tomcat/bin/launchd_wrapper.sh&lt;/string&gt;
</span><span class='line'>        &lt;/array&gt;
</span><span class='line'>        &lt;key&gt;ServiceDescription&lt;/key&gt;
</span><span class='line'>        &lt;string&gt;Tomcat&lt;/string&gt;
</span><span class='line'>        &lt;key&gt;StandardErrorPath&lt;/key&gt;
</span><span class='line'>        &lt;string&gt;/Users/username/tomcat/logs/launchd.stderr&lt;/string&gt;
</span><span class='line'>        &lt;key&gt;StandardOutPath&lt;/key&gt;
</span><span class='line'>        &lt;string&gt;/Users/username/tomcat/logs/launchd.stdout&lt;/string&gt;
</span><span class='line'>        &lt;key&gt;UserName&lt;/key&gt;
</span><span class='line'>        &lt;string&gt;root&lt;/string&gt;&lt;!-- MUST be root in order to run tomcat on port 80 --&gt;
</span><span class='line'>    &lt;/dict&gt;
</span><span class='line'>&lt;/plist&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>tomcat</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'># convenience script for easily starting/stopping tomcat on OSX
</span><span class='line'># (to be placed in /usr/local/bin. remember to run chmod +x on it)
</span><span class='line'>if [ 'start' = "$1" ]; then 
</span><span class='line'>    echo Starting tomcat service...
</span><span class='line'>    COMMAND=load
</span><span class='line'>elif [ 'stop' = "$1" ]; then 
</span><span class='line'>    echo Stopping tomcat service...
</span><span class='line'>    COMMAND=unload
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>if [ 'restart' = "$1" ]; then
</span><span class='line'>    echo Restarting tomcat service...
</span><span class='line'>    sudo launchctl unload -w /Library/LaunchDaemons/org.apache.tomcat.plist
</span><span class='line'>    sudo launchctl load -w /Library/LaunchDaemons/org.apache.tomcat.plist
</span><span class='line'>elif [ -n "$COMMAND" ]; then 
</span><span class='line'>    sudo launchctl $COMMAND -w /Library/LaunchDaemons/org.apache.tomcat.plist
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>


<blockquote><p>本该淡淡然~~~</p></blockquote>
]]></content>
  </entry>
  
</feed>
