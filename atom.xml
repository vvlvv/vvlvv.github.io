<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[人生短短数十载]]></title>
  <link href="http://livv.github.io/atom.xml" rel="self"/>
  <link href="http://livv.github.io/"/>
  <updated>2014-12-13T15:41:29+08:00</updated>
  <id>http://livv.github.io/</id>
  <author>
    <name><![CDATA[vvlee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Iphone Lcd Clock Use System Font]]></title>
    <link href="http://livv.github.io/blog/2013/07/17/iphone-lcd-clock-use-system-font/"/>
    <updated>2013-07-17T22:16:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/07/17/iphone-lcd-clock-use-system-font</id>
    <content type="html"><![CDATA[<p>iPhone 默认的液晶时钟效果很是经典，如果您想在自己的应用里显示该时钟，可以用以下代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[UIFont fontWithName:@"DBLCDTempBlack" size:58]</span></code></pre></td></tr></table></div></figure>


<ul>
<li>此外，类似 DBLCDTempBlack 的可用字体列表：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Family name: AppleGothic
</span><span class='line'>Font name: AppleGothic
</span><span class='line'>Family name: Hiragino Kaku Gothic ProN
</span><span class='line'>Font name: HiraKakuProN-W6
</span><span class='line'>Font name: HiraKakuProN-W3
</span><span class='line'>Family name: Arial Unicode MS
</span><span class='line'>Font name: ArialUnicodeMS
</span><span class='line'>Family name: Heiti K
</span><span class='line'>Font name: STHeitiK-Medium
</span><span class='line'>Font name: STHeitiK-Light
</span><span class='line'>Family name: DB LCD Temp
</span><span class='line'>Font name: DBLCDTempBlack
</span><span class='line'>Family name: Helvetica
</span><span class='line'>Font name: Helvetica-Oblique
</span><span class='line'>Font name: Helvetica-BoldOblique
</span><span class='line'>Font name: Helvetica
</span><span class='line'>Font name: Helvetica-Bold
</span><span class='line'>Family name: Marker Felt
</span><span class='line'>Font name: MarkerFelt-Thin
</span><span class='line'>Family name: Times New Roman
</span><span class='line'>Font name: TimesNewRomanPSMT
</span><span class='line'>Font name: TimesNewRomanPS-BoldMT
</span><span class='line'>Font name: TimesNewRomanPS-BoldItalicMT
</span><span class='line'>Font name: TimesNewRomanPS-ItalicMT
</span><span class='line'>Family name: Verdana
</span><span class='line'>Font name: Verdana-Bold
</span><span class='line'>Font name: Verdana-BoldItalic
</span><span class='line'>Font name: Verdana
</span><span class='line'>Font name: Verdana-Italic
</span><span class='line'>Family name: Georgia
</span><span class='line'>Font name: Georgia-Bold
</span><span class='line'>Font name: Georgia
</span><span class='line'>Font name: Georgia-BoldItalic
</span><span class='line'>Font name: Georgia-Italic
</span><span class='line'>Family name: Arial Rounded MT Bold
</span><span class='line'>Font name: ArialRoundedMTBold
</span><span class='line'>Family name: Trebuchet MS
</span><span class='line'>Font name: TrebuchetMS-Italic
</span><span class='line'>Font name: TrebuchetMS
</span><span class='line'>Font name: Trebuchet-BoldItalic
</span><span class='line'>Font name: TrebuchetMS-Bold
</span><span class='line'>Family name: Heiti TC
</span><span class='line'>Font name: STHeitiTC-Light
</span><span class='line'>Font name: STHeitiTC-Medium
</span><span class='line'>Family name: Geeza Pro
</span><span class='line'>Font name: GeezaPro-Bold
</span><span class='line'>Font name: GeezaPro
</span><span class='line'>Family name: Courier
</span><span class='line'>Font name: Courier
</span><span class='line'>Font name: Courier-BoldOblique
</span><span class='line'>Font name: Courier-Oblique
</span><span class='line'>Font name: Courier-Bold
</span><span class='line'>Family name: Arial
</span><span class='line'>Font name: ArialMT
</span><span class='line'>Font name: Arial-BoldMT
</span><span class='line'>Font name: Arial-BoldItalicMT
</span><span class='line'>Font name: Arial-ItalicMT
</span><span class='line'>Family name: Heiti J
</span><span class='line'>Font name: STHeitiJ-Medium
</span><span class='line'>Font name: STHeitiJ-Light
</span><span class='line'>Family name: Arial Hebrew
</span><span class='line'>Font name: ArialHebrew
</span><span class='line'>Font name: ArialHebrew-Bold
</span><span class='line'>Family name: Courier New
</span><span class='line'>Font name: CourierNewPS-BoldMT
</span><span class='line'>Font name: CourierNewPS-ItalicMT
</span><span class='line'>Font name: CourierNewPS-BoldItalicMT
</span><span class='line'>Font name: CourierNewPSMT
</span><span class='line'>Family name: Zapfino
</span><span class='line'>Font name: Zapfino
</span><span class='line'>Family name: American Typewriter
</span><span class='line'>Font name: AmericanTypewriter
</span><span class='line'>Font name: AmericanTypewriter-Bold
</span><span class='line'>Family name: Heiti SC
</span><span class='line'>Font name: STHeitiSC-Medium
</span><span class='line'>Font name: STHeitiSC-Light
</span><span class='line'>Family name: Helvetica Neue
</span><span class='line'>Font name: HelveticaNeue
</span><span class='line'>Font name: HelveticaNeue-Bold
</span><span class='line'>Family name: Thonburi
</span><span class='line'>Font name: Thonburi-Bold
</span><span class='line'>Font name: Thonburi</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Os Terminal Skill]]></title>
    <link href="http://livv.github.io/blog/2013/07/03/mac-os-terminal-skill/"/>
    <updated>2013-07-03T10:35:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/07/03/mac-os-terminal-skill</id>
    <content type="html"><![CDATA[<h2>control+u</h2>

<p>如果你在一条终端命令中发现有输入错误的话，那么用 control+u 快捷键可以直接删除这一整条命令，然后你就可以重新输入。</p>

<h2>mkdir</h2>

<p>很多人可能会很熟悉在 mkdir 是在「终端」中创建文件夹的工具，比如mkdir ./abc，即可在当前目录创建一个名为 abc 的文件夹。但如果想要建立更多层级的目录呢？就需要用 mkdir -p 命令来解决，比如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p ./abc/123/guomii/xxx</span></code></pre></td></tr></table></div></figure>


<h2>!!</h2>

<p>有时候，你写了一条长长的命令，按回车之后发现没有执行权限，需要在命令前添加 sudo，这时你可能要崩溃。不过其实可以用 <code>sudo !!</code> 这条命令来解决，它执行的效果和 sudo {上一条命令} 是一样的。</p>

<p>另外，! 在「终端」中还有一个妙用——它可以用来执行你最后一次以特定字母开头的命令。比如你在一个「终端」会话中已经执行过ls,mkdir,find,chown 等多条命令。这时你可以用 !l 来执行 ls，用 !f 来执行 find…大家都看懂了吧？(very cool)</p>

<h2>history</h2>

<p>用 history 命令可以显示你最近执行过的命令历史记录，你还可以指定显示条数，比如 history 20即可显示最近的20条命令历史记录。此外，你还可以筛选包含特定字符的命令，比如用 <code>history | grep mk</code>，就可以只显示历史记录中包含 mk 的命令。</p>

<h2>&amp;&amp;</h2>

<p>&amp;&amp; 可以将两条命令合并成一条命令，其实我们在之前的文章中，已经多次应用过这种写法了，大家可以返回去看看。</p>

<h2>reset</h2>

<p>reset 的作用很简单——将目前「终端」屏幕上的内容清空，就好像刚刚打开终端一样。（不如新建一个标签，然后关掉之前的，感觉这样更快捷。）</p>

<p>其实输入命令远没有快捷键方便，“control+l” 可以清屏，&#8221;command+k&#8221;可以全部清除。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wget Tutorials]]></title>
    <link href="http://livv.github.io/blog/2013/06/27/wget-tutorials/"/>
    <updated>2013-06-27T15:05:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/06/27/wget-tutorials</id>
    <content type="html"><![CDATA[<p>Wget是一种很好用的因特网下载工具，他具有的很多特性是其他工具所不能比拟的，再者他是一个轻量级可配置的下载工具。</p>

<p>本文结合例子介绍Windows下wget的多种下载方法和用途。</p>

<p>1、用Wget下载单个文件</p>

<p>下载的时候会显示：</p>

<p>　　~文件的大小、连接状态、连接地址以及文件的大小</p>

<p>　　~保存的名称</p>

<p>　　~下载进度条</p>

<p>　　~下载速度、时间，还有多少未下载</p>

<p>例如我下载editplus时输入</p>

<p>D:\Hack stuff\wget>wget <a href="http://software-files-a.cnet.com/s/software/12/32/81/47/">http://software-files-a.cnet.com/s/software/12/32/81/47/</a>
epp331.exe?token=1329413178_4553efa847829f3ecef10c1bc256fcc0&amp;lop=link&amp;ptype=3001
&amp;ontid=2352&amp;siteId=4&amp;edId=3&amp;spi=537d5d5485f688682d82c481c4fb15a1&amp;pid=12328147&amp;ps
id=10018241&amp;&amp;fileName=epp331.exe
则下载时会显示以下内容</p>

<p>D:\Hack stuff\wget>wget <a href="http://software-files-a.cnet.com/s/software/12/32/81/47/">http://software-files-a.cnet.com/s/software/12/32/81/47/</a>
epp331.exe?token=1329413178_4553efa847829f3ecef10c1bc256fcc0&amp;lop=link&amp;ptype=3001
&amp;ontid=2352&amp;siteId=4&amp;edId=3&amp;spi=537d5d5485f688682d82c481c4fb15a1&amp;pid=12328147&amp;ps
id=10018241&amp;&amp;fileName=epp331.exe
&ndash;2012-02-16 15:28:50&ndash;  <a href="http://software-files-a.cnet.com/s/software/12/32/81/47">http://software-files-a.cnet.com/s/software/12/32/81/47</a>
/epp331.exe?token=1329413178_4553efa847829f3ecef10c1bc256fcc0
Resolving software-files-a.cnet.com&hellip; 204.2.171.33, 204.2.171.35
Connecting to software-files-a.cnet.com|204.2.171.33|:80&hellip; connected.
HTTP request sent, awaiting response&hellip; 200 OK
Length: 1766464 (1.7M) [application/octet-stream]
Saving to: `epp331.exe@token=1329413178_4553efa847829f3ecef10c1bc256fcc0&#8217;</p>

<p>18% [======>                                ] 335,238     20.5K/s  eta 64s</p>

<p>2、用Wget-O下载可以为下载的文件指定另外一个名字</p>

<p>默认情况下wget会用最后的斜线后面的所有字符来命名下载下来的文件，如上例所示保存的文件名为</p>

<p>Saving to: `epp331.exe@token=1329413178_4553efa847829f3ecef10c1bc256fcc0&#8217;
这不是我们所想要的，我们可以用-O选项来改变将文件保存为editplus.exe</p>

<p>D:\Hack stuff\wget>wget -O editplus.exe <a href="http://software-files-a.cnet.com/s/software/12/32/81/47/">http://software-files-a.cnet.com/s/software/12/32/81/47/</a>
epp331.exe?token=1329413178_4553efa847829f3ecef10c1bc256fcc0&amp;lop=link&amp;ptype=3001
&amp;ontid=2352&amp;siteId=4&amp;edId=3&amp;spi=537d5d5485f688682d82c481c4fb15a1&amp;pid=12328147&amp;ps
id=10018241&amp;&amp;fileName=epp331.exe</p>

<p>3、用Wget &ndash;limit-rate指定下载的速度</p>

<p>如下面这个例子限制速度为300k</p>

<p>D:\Hack stuff\wget>wget &ndash;limit-rate=300k <a href="http://downloads.sourceforge.net/project/boost/boost-doc">http://downloads.sourceforge.net/project/boost/boost-doc</a>
s/1.47.0/boost_1_47_pdf.zip?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fboost%2F
&amp;ts=1329379231&amp;use_mirror=nchc</p>

<p>4、续传下载用Wget -c</p>

<p>当你在下载一个大文件时突然中断了那么这个选项就派上用场了</p>

<p>D:\Hack stuff\wget>wget -c <a href="http://downloads.sourceforge.net/project/boost/boost-doc">http://downloads.sourceforge.net/project/boost/boost-doc</a>
s/1.47.0/boost_1_47_pdf.zip?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fboost%2F
&amp;ts=1329379231&amp;use_mirror=nchc</p>

<p>5、后台下载用wget -b</p>

<p>用此选项下载时只会初始化下载而不会显示相关信息</p>

<p>D:\Hack stuff\wget>wget -b <a href="http://downloads.sourceforge.net/project/boost/boost-">http://downloads.sourceforge.net/project/boost/boost-</a>
docs/1.47.0/boost_1_47_pdf.zip?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fboost
%2F&amp;ts=1329379231&amp;use_mirror=nchc
Continuing in background, pid 6132.
Output will be written to `wget-log&#8217;.
下载以后会在wget目录下生产wget-log文件，用记事本打开可查看里面的内容如下所示</p>

<p>&ndash;2012-02-16 16:12:55&ndash;  <a href="http://downloads.sourceforge.net/project/boost/boost-docs/1.47.0/boost_1_47_pdf.zip?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fboost%2F">http://downloads.sourceforge.net/project/boost/boost-docs/1.47.0/boost_1_47_pdf.zip?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fboost%2F</a>
Resolving downloads.sourceforge.net&hellip; 216.34.181.59
Connecting to downloads.sourceforge.net|216.34.181.59|:80&hellip; connected.
HTTP request sent, awaiting response&hellip; 302 Found
Location: <a href="http://nchc.dl.sourceforge.net/project/boost/boost-docs/1.47.0/boost_1_47_pdf.zip">http://nchc.dl.sourceforge.net/project/boost/boost-docs/1.47.0/boost_1_47_pdf.zip</a> [following]
&ndash;2012-02-16 16:12:56&ndash;  <a href="http://nchc.dl.sourceforge.net/project/boost/boost-docs/1.47.0/boost_1_47_pdf.zip">http://nchc.dl.sourceforge.net/project/boost/boost-docs/1.47.0/boost_1_47_pdf.zip</a>
Resolving nchc.dl.sourceforge.net&hellip; 211.79.60.17
Connecting to nchc.dl.sourceforge.net|211.79.60.17|:80&hellip; connected.
HTTP request sent, awaiting response&hellip; 200 OK
Length: 31421410 (30M) [application/zip]
Saving to: `boost_1_47_pdf.zip.4&#8217;</p>

<pre><code> 0K .......... .......... .......... .......... ..........  0% 19.7K 25m51s
50K .......... .......... .......... .......... ..........  0% 29.1K 21m40s
</code></pre>

<p>   100K &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;.  0% 20.8K 22m35s
   150K &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;.  0% 19.5K 23m26s
   200K &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;.  0% 18.4K 24m13s
   250K &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;.  0% 20.8K 24m13s
   300K &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;.  1% 18.2K 24m41s
   350K &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;. &hellip;&hellip;&hellip;.  1% 23.5K 24m16s</p>

<p>6、测试你要下载的地址用Wget &ndash;spider</p>

<p>wget &ndash;spider DOWNLOAD-URL
如果所给URL是正确的则会显示</p>

<p>Resolving downloads.sourceforge.net&hellip; 216.34.181.59
Connecting to downloads.sourceforge.net|216.34.181.59|:80&hellip; connected.
HTTP request sent, awaiting response&hellip; 302 Found
Location: <a href="http://ncu.dl.sourceforge.net/project/boost/boost-docs/1.47.0/boost_1_">http://ncu.dl.sourceforge.net/project/boost/boost-docs/1.47.0/boost_1_</a>
47_pdf.zip [following]
Spider mode enabled. Check if remote file exists.
&ndash;2012-02-16 16:21:08&ndash;  <a href="http://ncu.dl.sourceforge.net/project/boost/boost-docs/">http://ncu.dl.sourceforge.net/project/boost/boost-docs/</a>
1.47.0/boost_1_47_pdf.zip
Resolving ncu.dl.sourceforge.net&hellip; 140.115.17.45
Connecting to ncu.dl.sourceforge.net|140.115.17.45|:80&hellip; connected.
HTTP request sent, awaiting response&hellip; 200 OK
Length: 31421410 (30M) [application/zip]
Remote file exists.
否则显示</p>

<p>Spider mode enabled. Check if remote file exists.
&ndash;2012-02-16 16:23:06&ndash;  <a href="http://downloads.sourceforge.net/project/boost/boost-do">http://downloads.sourceforge.net/project/boost/boost-do</a>
cs/1.47.0/boost_1_47_pdf222.zip?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fboos
t%2F
Resolving downloads.sourceforge.net&hellip; 216.34.181.59
Connecting to downloads.sourceforge.net|216.34.181.59|:80&hellip; connected.
HTTP request sent, awaiting response&hellip; 404 Not Found
Remote file does not exist &ndash; broken link!!!</p>

<p>7、增加重连次数用Wget -tries</p>

<p>在网络有问题的情况次选项尤其有用，默认是wget会重连20次以成功完成下载，我们可以把他增加为我们期待的次数</p>

<p>wget &ndash;tries=100 DOWNLOAD-URL</p>

<p>8、下载多个文件/URLS用wget -i</p>

<p>首先把所有要下载的文件或者URL存到一个记事本中，比如aa.txt，里面内容如下</p>

<p>URL1
URL2
URL3
URL4
接下来输入如下代码就可以批量下载了</p>

<p>wget -i aa.txt</p>

<p>9、下载一个完整的网站用wget -mirror</p>

<p>以下实现是你想完整的下载一个网站用于本地浏览</p>

<p>wget &ndash;mirror  -p &ndash;convert-links -P LOCAL-DIR WEBSITE-URL
&ndash;mirror:打开镜像选项</p>

<p>-p:下载所有用于显示给定网址所必须的文件</p>

<p>&ndash;convert-links：下载以后，转换链接用于本地显示</p>

<p>-P LOCAL_DIR：保存所有的文件或目录到指定的目录下</p>

<p>10、保存输出到日志文件而不是标准输出用wget -o</p>

<p>当你想要把信息保存到一个文件而不是在终端显示时用以下代码。</p>

<p>wget -o download.log DOWNLOAD-URL</p>

<p>11、当超过指定大小时终止下载用wget -Q</p>

<p>当文件已下载10M，此时你想停止下载可以使用下面的命令行</p>

<p>wget -Q10m -i FILE-WHICH-HAS-URLS
注意：此选项只能在下载多个文件时有用，当你下载一个文件时没用。</p>

<p>12、下载特定文件类型的文件用wget -r -A</p>

<p>你可以用此方法下载一下文件：</p>

<p>~从一个网站下载所有图片
~从一个网站下载所有视频</p>

<p>~从一个网站下载所有PDF文件</p>

<p>wget -r -A.pdf <a href="http://url-to-webpage-with-pdfs/">http://url-to-webpage-with-pdfs/</a></p>

<p>13、指定不下载某一类型的文件用wget &ndash;reject</p>

<p>你发现一个网站很有用，但是你不想下载上面的图片，因为太占流量，此时你可以用如下命令。</p>

<p>wget &ndash;reject=gif WEBSITE-TO-BE-DOWNLOADED</p>

<p>14、用wget实现FTP下载</p>

<p>匿名FTP下载用</p>

<p>wget ftp-url
有用户名和密码的FTP下载</p>

<p>wget &ndash;ftp-user=USERNAME &ndash;ftp-password=PASSWORD DOWNLOAD-URL</p>

<p>15、wget下载有的资源时必须用选项 &ndash;no-check-certificate，否则会提示没有认证不允许下载</p>

<p>wget &ndash;no-check-certificate URL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[上传appstore通过命令行]]></title>
    <link href="http://livv.github.io/blog/2013/06/27/uploade2appstore-via-command-line/"/>
    <updated>2013-06-27T13:41:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/06/27/uploade2appstore-via-command-line</id>
    <content type="html"><![CDATA[<blockquote><p>未验证（先记录下来，后续研究）<a href="http://stackoverflow.com/questions/11888122/how-to-upload-an-ios-app-to-the-app-store-via-command-line">来源</a></p></blockquote>

<ul>
<li><p>Make sure you have an application in &ldquo;waiting to upload&rdquo; state.</p></li>
<li><p>Create a new keychain Item Named: Xcode:itunesconnect.apple.com provide your credentials to itunes connect.</p></li>
<li><p>From the command line:</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xcrun -sdk iphoneos Validation -online -upload -verbose "path to ipa"</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>This is perfect. I've lots of clients and customers. I want to upload apps on behalf of my clients/customers, how can I create respective key chain items and provide them during "xcrun" command? – Satyam svv Dec 1 '12 at 2:28
</span><span class='line'>
</span><span class='line'>you can create a ad-hoc key before running xcrun and discart it after the upload is finished security add-generic-password -s Xcode:itunesconnect.apple.com -a LOGIN -w PASSWORD -U xcrun -sdk iphoneos Validation -online -upload -verbose "path to ipa" security delete-generic-password -s Xcode:itunesconnect.apple.com -a LOGIN</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Log Geek]]></title>
    <link href="http://livv.github.io/blog/2013/06/21/git-log-geek/"/>
    <updated>2013-06-21T14:21:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/06/21/git-log-geek</id>
    <content type="html"><![CDATA[<ul>
<li>打开.gitconfig文件(该文件在用户目录下面)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim .gitconfig</span></code></pre></td></tr></table></div></figure>


<ul>
<li>配置gitconfig</li>
</ul>


<p>在打开的文件中加入下面的命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[alias]
</span><span class='line'>       lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查看配置后的log</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git lg</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在log中查看哪一行被修发了</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git lg -p</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Terminal 彩色]]></title>
    <link href="http://livv.github.io/blog/2013/06/13/mac-terminal-color/"/>
    <updated>2013-06-13T13:49:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/06/13/mac-terminal-color</id>
    <content type="html"><![CDATA[<h3>彩色化ls的输出</h3>

<p>Mac中BSD的ls命令可以使用-G参数彩色化输出的文件列表，需要配置LSCOLORS环境变量定义颜色，具体配置方法可以输入man ls查看。</p>

<p>不过，我推荐安装Linux使用的GNU Coreutils替换Mac的ls命令，因为：</p>

<ul>
<li>Coreutils提供了配置工具，定义颜色代码更加方便；</li>
<li>Coreutils包含的不仅仅是ls，同时作为Linux用户，我更习惯于使用GNU的各种shell工具。</li>
</ul>


<hr />

<ul>
<li>通过Homebrew安装Coreutils</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install xz coreutils</span></code></pre></td></tr></table></div></figure>


<p>注：Coreutils并不依赖于xz，但它的源码是用xz格式压缩的，安装xz才能解压。</p>

<ul>
<li>生成颜色定义文件</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdircolors --print-database &gt; ~/.dir_colors</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在<code>~/.bash_profile</code>配置文件中加入以下代码</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if brew list | grep coreutils &gt; /dev/null ; then
</span><span class='line'>  PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"
</span><span class='line'>  alias ls='ls -F --show-control-chars --color=auto'
</span><span class='line'>  eval `gdircolors -b $HOME/.dir_colors`
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>


<p>gdircolor的作用就是设置ls命令使用的环境变量LS_COLORS（BSD是LSCOLORS），我们可以修改~/.dir_colors自定义文件的颜色，此文件中的注释已经包含各种颜色取值的说明。</p>

<ul>
<li>grep高亮显示关键字</li>
</ul>


<p>这个很简单，加上<code>--color</code>参数就可以了，为了使用方便，可以在<code>~/.bash_profile</code>配置文件中加上alias定义。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias grep='grep --color'
</span><span class='line'>alias egrep='egrep --color'
</span><span class='line'>alias fgrep='fgrep --color'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Vim语法高亮</li>
</ul>


<p>在Vim中输入命令:syntax on激活语法高亮，若需要Vim启动时自动激活，在<code>~/.vimrc</code>中添加一行<code>syntax on</code>即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrew Uninstall]]></title>
    <link href="http://livv.github.io/blog/2013/06/13/homebrew-uninstall/"/>
    <updated>2013-06-13T13:15:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/06/13/homebrew-uninstall</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd `brew –prefix`
</span><span class='line'>rm -rf Cellar
</span><span class='line'>brew prune
</span><span class='line'>rm -rf Library .git .gitignore bin/brew README.md share/man/man1/brew
</span><span class='line'>rm -rf ~/Library/Caches/Homebrew</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goagent Bitbucket]]></title>
    <link href="http://livv.github.io/blog/2013/06/11/goagent-bitbucket/"/>
    <updated>2013-06-11T22:39:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/06/11/goagent-bitbucket</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --add http.proxy 127.0.0.1:8087
</span><span class='line'>git config --add https.proxy 127.0.0.1:8087
</span><span class='line'>git config --add http.sslVerify false
</span><span class='line'>git config --add https.sslVerify false
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>url = https://*****@bitbucket.org/****.git
</span><span class='line'>pushurl = https://****@bitbucket.org/****.git</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS设计元素备忘单]]></title>
    <link href="http://livv.github.io/blog/2013/05/31/ios-design-memo-list/"/>
    <updated>2013-05-31T09:02:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/05/31/ios-design-memo-list</id>
    <content type="html"><![CDATA[<p><img src="http://livv.github.io/images/img/ios_1_resolutions.png">
<img src="http://livv.github.io/images/img/ios_2_icons.png">
<img src="http://livv.github.io/images/img/ios_3_commonly_used_design_elements.png">
<img src="http://livv.github.io/images/img/ios_4_dislplays.png"></p>

<blockquote><p>本该淡淡然~~~</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSPredicate 的用法]]></title>
    <link href="http://livv.github.io/blog/2013/05/08/nspredicate/"/>
    <updated>2013-05-08T09:22:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/05/08/nspredicate</id>
    <content type="html"><![CDATA[<p>一般来说这种情况还是蛮多的，比如你从文件中读入了一个array1，然后想把程序中的一个array2中符合array1中内容的元素过滤出来。
正 常傻瓜一点就是两个for循环，一个一个进行比较，这样效率不高，而且代码也不好看。
其实一个循环或者无需循环就可以搞定了，那就需要用搞 NSPredicate这个类了～膜拜此类～</p>

<h5>例子一，一个循环</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSArray *arrayFilter = [NSArray arrayWithObjects:@"pict", @"blackrain", @"ip", nil];
</span><span class='line'>NSArray *arrayContents = [NSArray arrayWithObjects:@"I am a picture.", @"I am a guy", @"I am gagaga", @"ipad", @"iphone", nil];</span></code></pre></td></tr></table></div></figure>


<p>我想过滤arrayContents的话只要循环 arrayFilter就好了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int i = 0, count = [arrayFilter count];
</span><span class='line'>for(i = 0; i &lt; count; i ++)
</span><span class='line'>{
</span><span class='line'>NSString *arrayItem = (NSString *)[arrayFilter objectAtIndex:i];
</span><span class='line'>NSPredicate *filterPredicate = [[NSPredicate predicateWithFormat:@"SELF CONTAINS %@", arrayItem];
</span><span class='line'>NSLog(@"Filtered array with filter %@, %@", arrayItem, [arrayContents filteredArrayUsingPredicate:filterPredicate]);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>当然以上代码中arrayContent最好用mutable 的，这样就可以直接filter了，NSArray是不可修改的。</p>

<h5>例子二，无需循环</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSArray *arrayFilter = [NSArray arrayWithObjects:@"abc1", @"abc2", nil];
</span><span class='line'>NSArray *arrayContent = [NSArray arrayWithObjects:@"a1", @"abc1", @"abc4", @"abc2", nil];
</span><span class='line'>NSPredicate *thePredicate = [NSPredicate predicateWithFormat:@"NOT (SELF in %@)", arrayFilter];
</span><span class='line'>[arrayContent filterUsingPredicate:thePredicate];</span></code></pre></td></tr></table></div></figure>


<p>这样arrayContent过滤出来的就是不包含 arrayFilter中的所有item了。</p>

<h5>生成文件路径下文件集合列表</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSFileManager *fileManager = [NSFileManager defaultManager];
</span><span class='line'>NSString *defaultPath = [[NSBundle mainBundle] resourcePath];
</span><span class='line'>NSError *error;
</span><span class='line'>NSArray *directoryContents = [fileManager contentsOfDirectoryAtPath:defaultPath error:&error]</span></code></pre></td></tr></table></div></figure>


<p><code>match的用法</code></p>

<ul>
<li>简单比较</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *match = @"imagexyz-999.png";
</span><span class='line'>NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF == %@", match];
</span><span class='line'>NSArray *results = [directoryContents filteredArrayUsingPredicate:predicate];﻿</span></code></pre></td></tr></table></div></figure>


<ul>
<li>match里like的用法（类似Sql中的用法）</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *match = @"imagexyz*.png";
</span><span class='line'>NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF like %@", match];
</span><span class='line'>NSArray *results = [directoryContents filteredArrayUsingPredicate:predicate];﻿</span></code></pre></td></tr></table></div></figure>


<ul>
<li>大小写比较</li>
</ul>


<p>［c］表示忽略大小写，［d］表示忽略重音，可以在一起使用，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *match = @"imagexyz*.png";
</span><span class='line'>NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF like[cd] %@", match];
</span><span class='line'>NSArray *results = [directoryContents filteredArrayUsingPredicate:predicate];﻿</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用正则</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *match = @"imagexyz-\\d{3}\\.png";  //imagexyz－123.png
</span><span class='line'>NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF matches %@", match];
</span><span class='line'>NSArray *results = [directoryContents filteredArrayUsingPredicate:predicate];﻿</span></code></pre></td></tr></table></div></figure>


<h5>总结：</h5>

<ol>
<li>当使用聚合类的操作符时是可以不需要循环的</li>
<li>当使用单个比较类的操作符时可以一个循环来搞定</li>
</ol>


<p>PS，例子 一中尝试使用[@&ldquo;SELF CONTAINS %@&rdquo;, arrayFilter] 来过滤会挂调，因为CONTAINS时字符串比较操作符，不是集合操作符。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[25个增强iOS应用程序性能的提示和技巧]]></title>
    <link href="http://livv.github.io/blog/2013/04/12/25-ios-skill/"/>
    <updated>2013-04-12T11:38:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/04/12/25-ios-skill</id>
    <content type="html"><![CDATA[<p><a href="http://beyondvincent.com">来源</a></p>

<ol>
<li>使用ARC进行内存管理</li>
<li>在适当的情况下使用reuseIdentifier</li>
<li>尽可能将View设置为不透明（Opaque）</li>
<li>避免臃肿的XIBs</li>
<li>不要阻塞主线程</li>
<li>让图片的大小跟UIImageView一样</li>
<li>选择正确的集合</li>
<li>使用GZIP压缩</li>
<li>重用和延迟加载View</li>
<li>缓存、缓存、缓存</li>
<li>考虑绘制</li>
<li>处理内存警告</li>
<li>重用花销很大的对象</li>
<li>使用Sprite Sheets</li>
<li>避免重新处理数据</li>
<li>选择正确的数据格式</li>
<li>设置适当的背景图片</li>
<li>降低Web内容的影响</li>
<li>设置阴影路径</li>
<li>优化TableView</li>
<li>选择正确的数据存储方式</li>
<li>加速启动时间</li>
<li>使用Autorelease Pool</li>
<li>缓存图片 — 或者不缓存</li>
<li>尽量避免Date格式化</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell_manual]]></title>
    <link href="http://livv.github.io/blog/2013/03/15/shell-manual/"/>
    <updated>2013-03-15T12:34:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/03/15/shell-manual</id>
    <content type="html"><![CDATA[<h3>一些强大的命令</h3>

<ul>
<li><code>!$</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>!$是一个特殊的环境变量，它代表了上一个命令的最后一个字符串。如：你可能会这样：
</span><span class='line'>$mkdir mydir
</span><span class='line'>$mv mydir yourdir
</span><span class='line'>$cd yourdir
</span><span class='line'>可以改成：
</span><span class='line'>$mkdir mydir
</span><span class='line'>$mv !$ yourdir
</span><span class='line'>$cd !$</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>sudo !!</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>以root的身份执行上一条命令 。
</span><span class='line'>场景举例：比如Ubuntu里用apt-get安装软件包的时候是需要root身份的，我们经常会忘记在apt-get前加sudo。每次不得不加上sudo再重新键入这行命令，这时可以很方便的用sudo !!完事。
</span><span class='line'>（陈皓注：在shell下，有时候你会输入很长的命令，你可以使用!xxx来重复最近的一次命令，比如，你以前输入过，vi /where/the/file/is, 下次你可以使用 !vi 重得上次最近一次的vi命令。）</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>cd –</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>回到上一次的目录 。
</span><span class='line'>场景举例：当前目录为/home/a，用cd ../b切换到/home/b。这时可以通过反复执行cd –命令在/home/a和/home/b之间来回方便的切换。</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>‘ALT+.’ or ‘&lt;ESC&gt; .’</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>热建alt+. 或 esc+. 可以把上次命令行的参数给重复出来。</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>^old^new</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>替换前一条命令里的部分字符串。
</span><span class='line'>场景：echo "wanderful"，其实是想输出echo "wonderful"。只需要^a^o就行了，对很长的命令的错误拼写有很大的帮助。（陈皓注：也可以使用 !!:gs/old/new）</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>du -s * | sort -n | tail</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>列出当前目录里最大的10个文件。</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>:w !sudo tee %</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>在vi中保存一个只有root可以写的文件</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>&gt; file.txt</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>创建一个空文件，比touch短。</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>在命令行前加空格，该命令不会进入history里。</p></li>
<li><p><code>echo “ls -l” | at midnight</code></p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>在某个时间运行某个命令。</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>ps aux | sort -nk +4 | tail</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>列出头十个最耗内存的进程</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>man ascii</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>显示ascii码表。
</span><span class='line'>场景：忘记ascii码表的时候还需要google么?尤其在天朝网络如此“顺畅”的情况下，就更麻烦在GWF多应用一次规则了，直接用本地的man ascii吧。</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>ssh user@server bash &lt; /path/to/local/script.sh</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>在远程机器上运行一段脚本。这条命令最大的好处就是不用把脚本拷到远程机器上。</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>python -m SimpleHTTPServer</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>一句话实现一个HTTP服务，把当前目录设为HTTP服务目录，可以通过http://localhost:8000访问 这也许是这个星球上最简单的HTTP服务器的实现了。</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Launchctl Manual]]></title>
    <link href="http://livv.github.io/blog/2013/03/12/launchctl-manual/"/>
    <updated>2013-03-12T13:54:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/03/12/launchctl-manual</id>
    <content type="html"><![CDATA[<h3>相关目录</h3>

<ul>
<li>/System/Library/LaunchDaemons 操作系统，用户登录前生效，以 root 身份执行任务</li>
<li>/System/Library/LaunchAgents 操作系统，用户登录后生效，以 root 身份执行任务</li>
<li>/Library/LaunchDaemons 系统管理员，用户登录前生效，以 root 身份执行任务</li>
<li>/Library/LaunchAgents 系统管理员，用户登录后生效，以 root 身份执行任务</li>
<li>~/Library/LaunchAgents 当前用户，用户登录后生效，以当前登录用户身份执行任务
使任务生效</li>
</ul>


<p>将 plist 文件按需要放置在上文的相关目录中</p>

<h3>使任务生效</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>launchctl load &lt;plist path&gt;</span></code></pre></td></tr></table></div></figure>


<p>执行上述操作后任务会立即生效，且重启系统后也会自动生效。如果 plist 没有放在指定的目录，重启系统后不会再生效。</p>

<p>如果 plist 存在 Key Disabled，且其值为 true，launchctl load 会提示 nothing found to load，系统启动时也不会自动生效人物，如果要手动强制启动，忽略 Disabled 为 true 带来的影响，传递 -wF 参数给 launchctl 即可。</p>

<h3>使任务失效</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>launchctl unload &lt;plist path&gt;</span></code></pre></td></tr></table></div></figure>


<p>将相关 plist 文件从原有目录中移除
执行上述操作后，任务会立即失效，plist 文件不会被移除，但是如果不将其从相关目录移走的话，重启系统后任务仍然会自动生效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 常用编译选项设置]]></title>
    <link href="http://livv.github.io/blog/2013/02/16/xcode-common-complie-option/"/>
    <updated>2013-02-16T11:39:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/02/16/xcode-common-complie-option</id>
    <content type="html"><![CDATA[<p>用标准库连接</p>

<p>LINK_WITH_STANDARD_LIBRARIES = YES</p>

<p>如果激活此设置，那么编译器在链接过程中会自动使用通过标准库的链接器。</p>

<p>Info.plist 输出编码</p>

<p>INFOPLIST_OUTPUT_FORMAT = binary</p>

<p>指定Info.plist文件的输出编码（默认情况下，输出与输入的编码保持不变），这个输出编码能指定“binary”或者“XML”。</p>

<p>生成调试符号</p>

<p>GCC_GENERATE_DEBUGGING_SYMBOLS = NO</p>

<p>当启用的时候，详情等级能够通过build的&#8217;Level of Debug Symbols&#8217;设置去控制。</p>

<p>隐藏内联方法</p>

<p>GCC_INLINES_ARE_PRIVATE_EXTERN = YES</p>

<p>Objective－C GC</p>

<p>GCC_ENABLE_OBJC_GC = Unsupported</p>

<p>优化级别</p>

<p>GCC_OPTIMIZATION_LEVEL = Fastest, Smallest   [-OS]</p>

<ul>
<li>None: 不做优化使用这个设置，编译器的目标是减少编译成本，使调试产生预期的结果。</li>
<li>Fast：优化编译将为大函数占用更多的时间和内存使用这个设置，编译器将尝试减少代码的大小和执行时间，不进行任何优化，需要大量编译时间。</li>
<li>Faster：编译器执行几乎所有支持的优化，它不考虑空间和速度之间的平衡与“Fast”设置相比，该设置会增加编译时间和生成代码的性能。编译器不进行循环展开、内联函数和寄存器变量的重命名。</li>
<li>Fastest：开启“Faster”支持的所有的优化，同时也开启内联函数和寄存器变量的重命名选项</li>
<li>Fastest,smallest：优化代码大小这个设置启用“Faster”所有的优化，一般不增加代码大小，它还执行旨在减小代码大小的进一步优化。</li>
</ul>


<p>C语言方言</p>

<p>GCC_C_LANGUAGE_STANDARD = C89</p>

<p>警告</p>

<p>检查Switch语句</p>

<p>GCC_WARN_CHECK_SWITCH_STATEMENTS = YES</p>

<p>隐藏局部变量</p>

<p>GCC_WARN_SHADOW = YES</p>

<p>隐式转换成32位的类型</p>

<p>GCC_WARN_64_TO_32_BIT_CONVERSION = YES</p>

<p>未完成的Objective－C协议</p>

<p>GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL = YES</p>

<p>抑制所有的警告</p>

<p>GCC_WARN_INHIBIT_ALL_WARNINGS = NO</p>

<p>初始化时没有完整的括号</p>

<p>GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES</p>

<p>例子（a没有完全的括号，b有）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int a[ 2 ][ 2 ] = { 0, 1, 2, 3 };   
</span><span class='line'>int b[ 2 ][ 2 ] = { { 0, 1 }, { 2, 3 } }; </span></code></pre></td></tr></table></div></figure>


<p>不匹配的返回类型</p>

<p>GCC_WARN_ABOUT_RETURN_TYPE = YES</p>

<p>缺少括号</p>

<p>GCC_WARN_MISSING_PARENTHESES = YES</p>

<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{  
</span><span class='line'>    if( a )  
</span><span class='line'>        if( b )  
</span><span class='line'>            foo();  
</span><span class='line'>        else  
</span><span class='line'>            bar();  
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{  
</span><span class='line'>    if( a )  
</span><span class='line'>    {  
</span><span class='line'>        if( b )  
</span><span class='line'>            foo();  
</span><span class='line'>        else  
</span><span class='line'>            bar();  
</span><span class='line'>    }  
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>


<p>在结构体初始化时缺少字段</p>

<p>GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS = YES</p>

<p>缺少函数原型</p>

<p>GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES</p>

<p>在文件结尾缺少新行</p>

<p>GCC_WARN_ABOUT_MISSING_NEWLINE = YES</p>

<p>选择了多个定义的类型(@Selector)</p>

<p>GCC_WARN_MULTIPLE_DEFINITION_TYPES_FOR_SELECTOR = NO</p>

<p>严格的Selector匹配</p>

<p>GCC_WARN_STRICT_SELECTOR_MATCH = YES</p>

<p>把缺少函数原型当作错误</p>

<p>GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS = YES</p>

<p>把所有的警告当作错误</p>

<p>GCC_TREAT_WARNINGS_AS_ERRORS = YES</p>

<p>未定义的Selector</p>

<p>GCC_WARN_UNDECLARED_SELECTOR = YES</p>

<p>未初始化的自动变量</p>

<p>GCC_WARN_UNINITIALIZED_AUTOS = YES</p>

<p>未知的Pragma指令</p>

<p>GCC_WARN_UNKNOWN_PRAGMAS = YES</p>

<p>未使用的函数</p>

<p>GCC_WARN_UNUSED_FUNCTION = YES</p>

<p>未使用的标签</p>

<p>GCC_WARN_UNUSED_LABEL = YES</p>

<p>未使用的参数</p>

<p>GCC_WARN_UNUSED_PARAMETER = YES</p>

<p>未使用的值</p>

<p>GCC_WARN_UNUSED_VALUE = YES</p>

<p>当一个语句计算的结果显式的未使用的时候发出警告</p>

<p>未使用的变量</p>

<p>GCC_WARN_UNUSED_VARIABLE = YES</p>

<p>警告－所有过时的函数</p>

<p>GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS = YES</p>

<p>offsetof宏未定义使用的警告</p>

<p>GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO = YES</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HockeyKit Run on OSX]]></title>
    <link href="http://livv.github.io/blog/2013/01/29/hockeykit-run-on-osx/"/>
    <updated>2013-01-29T16:01:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/01/29/hockeykit-run-on-osx</id>
    <content type="html"><![CDATA[<h3>引子</h3>

<p>今天工作不是很忙，闲的无聊瞎逛。突然间发现了<a href="https://testflightapp.com/">TestFight</a>这个东东。很好用，但是弊端也很明显。每次打包ipa有20M+，上传服务器，进行OTA安装又要重新下载，太浪费时间了。不适合公司内部用。这个东东适合一些业余的团队在业余的时间做开发。及时性要求不高。google了之后发现还有个HockeyKit。</p>

<h3>HockeyKit</h3>

<p>公司现在用的是HockeyApp，这个项目之前是开源的，后来变收费了。所以我们就一直停留在老的版本，功能很有限。突然发现了新大陆HockeyKit，免费开源。支持android和ios。Nice ^_^  马上搭建起来。现在我的mac上做测试，成功后再搭建到公司服务器上。</p>

<ol>
<li>项目地址<a href="https://github.com/TheRealKerni/HockeyKit">https://github.com/TheRealKerni/HockeyKit</a>，克隆到本地，切换到master。目录有server，client，demo。只需要server就可以了。</li>
<li>按照<a href="https://github.com/TheRealKerni/HockeyKit/wiki/Server">wiki</a>的介绍安装，首先需要一个支持php5的服务器。lion自带了apache，修改httpd.conf，让apache支持php。（lion 需要命令来启动apache <code>sudo apachectl start</code>）

<ul>
<li>确保你的服务器的httpd.conf 中 AllowOverride All ，以支持HockeyKit Server中子目录的配置重载</li>
<li>确保服务的rewirte可用（lion默认开启 LoadModule rewrite_module libexec/apache2/mod_rewrite.so)</li>
</ul>
</li>
<li>其他的按照文档进行就可以了。大功告成， ^_^  最后点击install application，如果出现alertview提示错误，重新回到步骤2检查一下是否设置了AllowOverride All。</li>
</ol>


<blockquote><p>本该淡淡然</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[密码安全存储解决方案]]></title>
    <link href="http://livv.github.io/blog/2013/01/23/store-password-security/"/>
    <updated>2013-01-23T15:40:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/01/23/store-password-security</id>
    <content type="html"><![CDATA[<p>来源<a href="http://www.williamlong.info/archives/3224.html">月光博客</a></p>

<p>自己留个备份 ^_^</p>

<h3>菜鸟方案：</h3>

<p>　　直接存储用户密码的明文或者将密码加密存储。</p>

<p>　　曾经有一次我在某知名网站重置密码，结果邮件中居然直接包含以前设置过的密码。我和客服咨询为什么直接将密码发送给用户，客服答曰：“减少用户步骤，用户体验更好”；再问“管理员是否可以直接获知我的密码”， 客服振振有词：“我们用XXX算法加密过的，不会有问题的”。 殊不知，密码加密后一定能被解密获得原始密码，因此，该网站一旦数据库泄露，所有用户的密码本身就大白于天下。</p>

<p>　　以后看到这类网站，大家最好都绕道而走，因为一家“暴库”，全部遭殃。
　　</p>

<h3>入门方案：</h3>

<p>　　将明文密码做单向哈希后存储。</p>

<p>　　单向哈希算法有一个特性，无法通过哈希后的摘要(digest)恢复原始数据，这也是“单向”二字的来源，这一点和所有的加密算法都不同。常用的单向哈希算法包括SHA-256，SHA-1，MD5等。例如，对密码“passwordhunter”进行SHA-256哈希后的摘要(digest)如下：
“bbed833d2c7805c4bf039b140bec7e7452125a04efa9e0b296395a9b95c2d44c”</p>

<p>　　可能是“单向”二字有误导性，也可能是上面那串数字唬人，不少人误以为这种方式很可靠， 其实不然。</p>

<p>　　单向哈希有两个特性：</p>

<p>　　1）从同一个密码进行单向哈希，得到的总是唯一确定的摘要</p>

<p>　　2）计算速度快。随着技术进步，尤其是显卡在高性能计算中的普及，一秒钟能够完成数十亿次单向哈希计算</p>

<p>　　结合上面两个特点，考虑到多数人所使用的密码为常见的组合，攻击者可以将所有密码的常见组合进行单向哈希，得到一个摘要组合，然后与数据库中的摘要进行比对即可获得对应的密码。这个摘要组合也被称为rainbow table。</p>

<p>　　更糟糕的是，一个攻击者只要建立上述的rainbow table，可以匹配所有的密码数据库。仍然等同于一家“暴库”，全部遭殃。以后要是有某家厂商宣布“我们的密码都是哈希后存储的，绝对安全”，大家对这个行为要特别警惕并表示不屑。有兴趣的朋友可以搜索下，看看哪家厂商躺着中枪了。
　　</p>

<h3>进阶方案：</h3>

<p>　　将明文密码混入“随机因素”，然后进行单向哈希后存储，也就是所谓的“Salted Hash”。</p>

<p>　　这个方式相比上面的方案，最大的好处是针对每一个数据库中的密码，都需要建立一个完整的rainbow table进行匹配。 因为两个同样使用“passwordhunter”作为密码的账户，在数据库中存储的摘要完全不同。</p>

<p>　　10多年以前，因为计算和内存大小的限制，这个方案还是足够安全的，因为攻击者没有足够的资源建立这么多的rainbow table。 但是，在今日，因为显卡的恐怖的并行计算能力，这种攻击已经完全可行。
　　</p>

<h3>专家方案：</h3>

<p>　　故意增加密码计算所需耗费的资源和时间，使得任何人都不可获得足够的资源建立所需的rainbow table。</p>

<p>　　这类方案有一个特点，算法中都有个因子，用于指明计算密码摘要所需要的资源和时间，也就是计算强度。计算强度越大，攻击者建立rainbow table越困难，以至于不可继续。</p>

<p>　　这类方案的常用算法有三种：</p>

<p>　　1）PBKDF2(Password-Based Key Derivation Function)</p>

<p>　　PBKDF2简单而言就是将salted hash进行多次重复计算，这个次数是可选择的。如果计算一次所需要的时间是1微秒，那么计算1百万次就需要1秒钟。假如攻击一个密码所需的rainbow table有1千万条，建立所对应的rainbow table所需要的时间就是115天。这个代价足以让大部分的攻击者忘而生畏。</p>

<p>　　美国政府机构已经将这个方法标准化，并且用于一些政府和军方的系统。 这个方案最大的优点是标准化，实现容易同时采用了久经考验的SHA算法。</p>

<p>　　2） bcrypt</p>

<p>　　bcrypt是专门为密码存储而设计的算法，基于Blowfish加密算法变形而来，由Niels Provos和David Mazières发表于1999年的USENIX。</p>

<p>　　bcrypt最大的好处是有一个参数（work factor)，可用于调整计算强度，而且work factor是包括在输出的摘要中的。随着攻击者计算能力的提高，使用者可以逐步增大work factor，而且不会影响已有用户的登陆。</p>

<p>　　bcrypt经过了很多安全专家的仔细分析，使用在以安全著称的OpenBSD中，一般认为它比PBKDF2更能承受随着计算能力加强而带来的风险。bcrypt也有广泛的函数库支持，因此我们建议使用这种方式存储密码。</p>

<p>　　3) scrypt</p>

<p>　　scrypt是由著名的FreeBSD黑客 Colin Percival为他的备份服务 Tarsnap开发的。</p>

<p>　　和上述两种方案不同，scrypt不仅计算所需时间长，而且占用的内存也多，使得并行计算多个摘要异常困难，因此利用rainbow table进行暴力攻击更加困难。scrypt没有在生产环境中大规模应用，并且缺乏仔细的审察和广泛的函数库支持。但是，scrypt在算法层面只要没有破绽，它的安全性应该高于PBKDF2和bcrypt。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 OS X 系统中使用 Sips 命令批量处理图片]]></title>
    <link href="http://livv.github.io/blog/2013/01/10/sips-on-osx/"/>
    <updated>2013-01-10T12:54:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/01/10/sips-on-osx</id>
    <content type="html"><![CDATA[<p>苹果系统自带的图片处理命令<strong><em>sips</em></strong>。</p>

<p>比如，你想要将某文件夹的 n 张大尺寸JPG图片都缩小成宽度为600px的图片，高度自动按比例缩放。那么命令则为(假设文件夹的路径为 ~/Desktop/Test)：</p>

<pre><code>sips -Z 600 ~/Desktop/Test/*.JPG
</code></pre>

<p>执行完成之后，你桌面上Test文件夹中的所有JPG图片都缩小城宽度为600px的小尺寸版本了。另外，sips 还有很多功能有待你挖掘，比如你还可以指定高度和宽度(注意z需要小写)：</p>

<pre><code>sips -z 300 600 ~/Desktop/Test/*.JPG
</code></pre>

<p>你还可以用 sips 命令批量旋转图片，默认旋转方式为顺时针，下面是将图片顺时针旋转90度的方法：</p>

<pre><code>sips -r 90 ~/Desktop/Test/*.JPG
</code></pre>

<p>其实，你甚至可以以不规则的角度旋转，比如旋转120度，大家自己试试是什么效果吧。</p>

<p>还可以用来翻转图片，不管是水平翻转还是垂直翻转都可以。水平翻转命令为：</p>

<pre><code>sips -f horizontal ~/Desktop/Test/*.JPG
</code></pre>

<p>垂直翻转命令为：</p>

<pre><code>sips -f vertical ~/Desktop/Test/*.JPG
</code></pre>

<blockquote><p>本该淡淡然~~~</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MAC下Android的Eclipse开发环境的搭建]]></title>
    <link href="http://livv.github.io/blog/2013/01/08/mac-android-eclipse/"/>
    <updated>2013-01-08T23:52:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/01/08/mac-android-eclipse</id>
    <content type="html"><![CDATA[<h4>一．Eclipse的下载</h4>

<p>   到网站：<a href="http://www.eclipse.org/downloads/">http://www.eclipse.org/downloads/</a>，由于我们是用Java开发的所以步骤如下：</p>

<ol>
<li><p>找到“Eclipse IDE for java Developers”此处右上角会根据你当前使用的系统自动选择，Mac下就会自动选择位“Mac OS X（Cocoa）”</p></li>
<li><p>然后点击右边的“Mac OS X 64bit”（这里我的Pro是i5处理器可以用64位的），根据你的机器也可以选择“Mac OS X 32bit”进行下载。</p></li>
</ol>


<h4>二．安装ADT</h4>

<p>   <strong><em>ADT</em></strong>是Android应用程序的开发环境</p>

<ol>
<li><p>点击菜单中的Help ——> Install New Software⋯ ;</p></li>
<li><p>在弹出的对话框中有个“Work with”，在右边的输入栏中输入：<code>https://dl-ssl.google.com/android/eclipse/</code> 然后下面就会pending出来一个“Developer Tools”，勾选上，然后一路的Next下去就可以安装完成。(如果想开发NDK，顺便选上NDK plugins)</p></li>
</ol>


<h4>三．设定ADT</h4>

<p>   在菜单栏Refactor中如果能看到Android的标签表示ADT安装成功。</p>

<ol>
<li><p>下载Android SDK、NDK（通过HomeBrew安装）</p></li>
<li><p>安装Android SDK，然后在菜单栏Eclipse —> Preferences（偏好设置）,会弹出一个Preferences对话框，选Android，然后在SDK Loaction中填入刚下载的SDK的路径或者点击右边的Browser选择。</p></li>
<li><p>生成模拟器，菜单栏Window —> Android SDK and AVD Manger 会弹出对话框，然后在对话框中选择new开始按自己的需求新建模拟器，至此就大功告成了！</p></li>
</ol>


<blockquote><p>本该淡淡然~~~</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Linux Date]]></title>
    <link href="http://livv.github.io/blog/2013/01/05/mac-linux-date/"/>
    <updated>2013-01-05T11:39:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/01/05/mac-linux-date</id>
    <content type="html"><![CDATA[<h3>Mac和Linux下，分别如何用date命令表示明天</h3>

<h5>Linux 平台，用date表示明天</h5>

<pre><code>date -d "tomorrow"
</code></pre>

<p>类似的有：</p>

<pre><code>date -d "yesterday"    # 顯示昨天的時間
date -d "tomorrow"     # 顯示明天的時間
date -d "1 hour"       # 顯示一小時後的時間
date -d "2 day ago"    # 顯示二天前的時間
date -d "3 month ago"  # 顯示三個月前的時間
date -d "2 year"       # 顯示二年後的時間
date -d "last friday"  # 顯示上個星期五的時間
date -d "next week"    # 顯示下週的時間
date -d "next month"   # 顯示下個月的時間
date -d "fortnight"    # 顯示二週後的時間
date -d "7/1 3 week"   # 顯示 7/1 起算的第三週
</code></pre>

<h5>Mac 平台，用date表示明天</h5>

<pre><code>#Mac下的date能接受-r选项，-r 接受多少秒作为其参数
#86400 = 60 * 60 * 24 (s) = 24 (h)
date -r $(expr $(date '+%s') + 86400)
</code></pre>

<blockquote><p>本该淡淡然~~~</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013 计划]]></title>
    <link href="http://livv.github.io/blog/2013/01/03/2013-plan/"/>
    <updated>2013-01-03T23:56:00+08:00</updated>
    <id>http://livv.github.io/blog/2013/01/03/2013-plan</id>
    <content type="html"><![CDATA[<blockquote><p>人生短短数十载，本该淡淡然。</p></blockquote>

<p>so，今年不能像往年那样虚度了。必须做点什么了。</p>

<hr />

<ul>
<li>计划1 做点自己喜欢的事情</li>
<li>计划2 做点有意思的事情</li>
</ul>

]]></content>
  </entry>
  
</feed>
